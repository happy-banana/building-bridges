require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
module.exports = (function(){

	var MobileServerBridgeBase = require('shared/MobileServerBridge');

	var Config = require('./config');
	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		MobileServerBridgeBase.call(this, presentation, url);
		bean.on(this.presentation, Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndexChanged.bind(this));
	}

	MobileServerBridge.prototype = Object.create(MobileServerBridgeBase.prototype);

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {
			email: Config.mobileServerUsername,
			password: Config.mobileServerPassword,
		};
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		MobileServerBridgeBase.prototype.socketConnectHandler.call(this);
		this.tryToSend(Constants.MESSAGE, {
			target: {
				client: 'mobile',
			},
			content: {
				action: Constants.SET_CURRENT_SLIDE_INDEX,
				currentSlideIndex: this.presentation.currentSlideIndex
			}
		});
	};

	MobileServerBridge.prototype.currentSlideIndexChanged = function(currentSlideIndex) {
		this.tryToSend(Constants.MESSAGE, {
			target: {
				client: 'mobile',
			},
			content: {
				action: Constants.SET_CURRENT_SLIDE_INDEX,
				currentSlideIndex: currentSlideIndex
			}
		});
	};

	return MobileServerBridge;

})();

},{"./config":6,"Constants":"Constants","shared/MobileServerBridge":"shared/MobileServerBridge"}],3:[function(require,module,exports){
module.exports = (function(){

  var path = requireNode('path');

  var PresentationBase = require('shared/Presentation');

  var Constants = require('Constants');
  var Config = require('./config');

  var ChildApp = require('./childapps/ChildApp');
  var MobileServerBridge = require('./MobileServerBridge');

  var SlideBridge = require('./SlideBridge');

  var KEYCODE_LEFT = 37;
  var KEYCODE_RIGHT = 39;

  function Presentation(data, role, settings) {
    if(settings) {
      for(var key in settings) {
        Config[key] = settings[key];
      }
    }
    PresentationBase.call(this, data, 'presentation');

    window.onbeforeunload = this.closeHandler.bind(this);

    this.elevatorMusicPlaying = false;
    this.elevatorMusic = false;

    $('#consoleModal').on('show.bs.modal', function (e) {
      var w = $('#consoleModal iframe')[0].contentWindow;
      w.postMessage('consoleModalOpen', 'http://localhost:3000');
    });

    this.elevatorMusic = $('#elevatormusic')[0];
    $('.elevator-button').on('click', $.proxy(this.toggleElevatorMusic, this));

    $('.info .ip').text('bbridges.herokuapp.com');

    $(window).on('keydown', $.proxy(this.keydownHandler, this));
    bean.on(this, Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndexChangedHandler.bind(this));

    //forward childapp messages
    ChildApp.getInstance().on('stdout-data', this.childAppDataHandler.bind(this));
    ChildApp.getInstance().on('stderr-data', this.childAppErrorHandler.bind(this));

    $('body').on(Constants.GO_TO_PREVIOUS_SLIDE, this.goToPreviousSlide.bind(this));
    $('body').on(Constants.GO_TO_NEXT_SLIDE, this.goToNextSlide.bind(this));
    $('body').on(Constants.OPEN_COMMAND_LINE, this.openCommandLine.bind(this));
    $('body').on(Constants.OPEN_CAMERA, this.openCamera.bind(this));
  }

  Presentation.prototype = Object.create(PresentationBase.prototype);

  Presentation.prototype.closeHandler = function(e) {
    if(ChildApp.getInstance().isRunning()) {
      ChildApp.getInstance().stop(function(){
        console.log('Presentation: childapp stopped');
        requireNode('remote').getCurrentWindow().close();
      });
      return false;
    }
  };

  Presentation.prototype.currentSlideIndexChangedHandler = function(slideIndex) {
    console.log('Presentation: currentSlideIndexChangedHandler');
    if(ChildApp.getInstance().isRunning()) {
      ChildApp.getInstance().stop(function(){
        console.log('Presentation: childapp stopped');
      });
    }
  };

  Presentation.prototype.createMobileServerBridge = function() {
    return new MobileServerBridge(this, Config.mobileServerUrl);
  };

  Presentation.prototype.toggleElevatorMusic = function() {
    this.elevatorMusicPlaying = !this.elevatorMusicPlaying;
    if(this.elevatorMusicPlaying) {
      this.elevatorMusic.play();
    } else {
      this.elevatorMusic.pause();
    }
  };

  Presentation.prototype.createSlideHolders = function() {
    for(var i = 0; i < this.numSlideHolders; i++) {
      var $slideHolder = $('<div class="slide-frame" />');
      this.slideHolders.push($slideHolder);
      $('#presentation').append($slideHolder);
    }
  };

  //prepend urls with file:/// (faster?)
  Presentation.prototype.processSlideSrc = function(src) {
    src = 'file:///' + path.resolve('./presentation/' + src);
    src = src.replace(/\\/g,"/");
    return src;
  };

  Presentation.prototype.createSlideBridges = function(data) {
    PresentationBase.prototype.createSlideBridges.call(this, data);
    var that = this;
    var $slideMenu = $('#slideMenu');
    var numSlideBridges = this.slideBridges.length;
    for(var i = 0; i < numSlideBridges; i++) {
      var slideBridge = this.slideBridges[i];
      $slideMenu.append('<li><a href="#" data-slidenr="' + i + '">' + (i + 1) + ' ' + slideBridge.name + '</a></li>');
    }
    $slideMenu.find('a').on('click', function(event){
      event.preventDefault();
      that.setCurrentSlideIndex(parseInt($(this).data('slidenr')));
    });
  };

  Presentation.prototype.createSlideBridge = function(slide) {
    //use our own bridge to webviews
    return new SlideBridge(slide);
  };

  Presentation.prototype.attachToSlideHolder = function(slideHolder, slideBridge, src) {
    //listen for events on this slideHolder
    $(slideHolder).off('message-from-slide');
    $(slideHolder).on('message-from-slide', (function(event, message) {
      this.slideMessageHandler({data: message});
    }).bind(this));
    PresentationBase.prototype.attachToSlideHolder.call(this, slideHolder, slideBridge, src);
  };

  Presentation.prototype.slideMessageHandler = function(event) {
    PresentationBase.prototype.slideMessageHandler.call(this, event);
    if(!event.data) {
      return;
    }
    switch(event.data.action) {
      case Constants.GO_TO_PREVIOUS_SLIDE:
        this.goToPreviousSlide();
        break;
      case Constants.GO_TO_NEXT_SLIDE:
        this.goToNextSlide();
        break;
      case Constants.OPEN_COMMAND_LINE:
        this.openCommandLine();
        break;
      case Constants.OPEN_CAMERA:
        this.openCamera();
        break;
      case Constants.CHILD_APP_SAVE_CODE:
        ChildApp.getInstance().saveCode(event.data.code, event.data.type);
        break;
      case Constants.CHILD_APP_RUN_CODE:
        ChildApp.getInstance().runCode(event.data.code, event.data.type);
        break;
    }
  };

  Presentation.prototype.keydownHandler = function(event) {
    var self = this;
    //one frame delay
    requestAnimationFrame(function(){
      if(event.isImmediatePropagationStopped()) {
        return;
      }
      switch(event.keyCode) {
        case KEYCODE_LEFT:
          self.goToPreviousSlide();
          break;
        case KEYCODE_RIGHT:
          self.goToNextSlide();
          break;
      }
    });
  };

  Presentation.prototype.childAppDataHandler = function(data) {
    var currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);
    if(currentSlideBridge) {
      currentSlideBridge.tryToPostMessage({
        action: Constants.CHILD_APP_STDOUT_DATA,
        data: data
      });
    }
  };

  Presentation.prototype.childAppErrorHandler = function(data) {
    var currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);
    if(currentSlideBridge) {
      currentSlideBridge.tryToPostMessage({
        action: Constants.CHILD_APP_STDERR_DATA,
        data: data
      });
    }
  };

  Presentation.prototype.openCommandLine = function() {
    $('#consoleModal').modal('show');
  };

  Presentation.prototype.openCamera = function() {
    $('#webcamModal').modal('show');
  };

  Presentation.prototype.handleMobileServerMessage = function(message) {
    if(message.content) {
      if(message.content.action === 'goToNextSlide') {
        this.goToNextSlide();
      } else if(message.content.action === 'goToPreviousSlide') {
        this.goToPreviousSlide();
      }
    }
  };

  return Presentation;

})();

},{"./MobileServerBridge":2,"./SlideBridge":4,"./childapps/ChildApp":5,"./config":6,"Constants":"Constants","shared/Presentation":"shared/Presentation"}],4:[function(require,module,exports){
module.exports = (function(){

  //Extend the shared class
  var SharedSlideBridge = require('shared/SlideBridge');

  function SlideBridge(data) {
    SharedSlideBridge.call(this, data);
  }

  SlideBridge.prototype = Object.create(SharedSlideBridge.prototype);

  SlideBridge.prototype.attachToSlideHolder = function(slideHolder, src, cb) {
    this.slideHolder = slideHolder;
    //notify the content it is being cleared
    this.tryToPostMessage({action: 'destroy'});
    //clear the current content
    this.slideHolder.innerHTML = '';
    $(slideHolder).off('load');
    $(slideHolder).attr('data-name', this.name);
    $(slideHolder).addClass('loading');
    if(src !== $(slideHolder).attr('data-src')) {
      console.log('not loaded yet', src);
      //create html import
      var $importEl = $('<link rel="import">');
      var importEl = $importEl[0];
      console.log('bind load', src);
      $importEl.on('load', (function(){
        console.log('loaded', src);
        var template = importEl.import.querySelector('template');
        if(template) {
          var clone = document.importNode(template.content, true);
          this.slideHolder.appendChild(clone);
        }
        $importEl.remove();
        $(slideHolder).removeClass('loading');
        this.tryToPostMessage({
          action: 'setState',
          state: this.state
        });
        cb();
      }).bind(this));
      $(slideHolder).html($importEl);
      $importEl.attr('href', src);
      $(slideHolder).attr('data-src', src);
    }
  };

  SlideBridge.prototype.tryToPostMessage = function(message) {
    if(!this.slideHolder)
    {
      return;
    }
    //trigger with jquery
    $(this.slideHolder).trigger('message-to-slide', message);
  };

  return SlideBridge;
})();

},{"shared/SlideBridge":"shared/SlideBridge"}],5:[function(require,module,exports){
(function (process){
var Config = require('../config'),
	events = requireNode('events'),
	fs = requireNode('fs'),
	childProcess = requireNode('child_process'),
	util = requireNode('util'),
	path = requireNode('path');

//kill entire process tree
//http://krasimirtsonev.com/blog/article/Nodejs-managing-child-processes-starting-stopping-exec-spawn
var kill = function (pid, signal, callback) {
	signal = signal || 'SIGKILL';
	callback = callback || function () {};
	//var isWin = /^win/.test(process.platform);
	var isWin = true;
	if(!isWin) {
		var psTree = requireNode('ps-tree');
		var killTree = true;
		if(killTree) {
			psTree(pid, function (err, children) {
				[pid].concat(
					children.map(function (p) {
						return p.PID;
					})
				).forEach(function (tpid) {
					try { process.kill(tpid, signal); }
					catch (ex) { }
					});
					callback();
			});
		} else {
			try { process.kill(pid, signal); }
			catch (ex) { }
			callback();
		}
	} else {
		childProcess.exec('taskkill /PID ' + pid + ' /T /F', function (error, stdout, stderr) {
			callback();
		});
	}
};

function ChildApp() {
	events.EventEmitter.call(this);
	console.log("[ChildApp] constructor");
	this.runner = false;
}

util.inherits(ChildApp, events.EventEmitter);

ChildApp.getInstance = function() {
	if(!ChildApp.instance) {
		ChildApp.instance = new ChildApp();
	}
	return ChildApp.instance;
};

ChildApp.prototype.saveCode = function(code, type, cb) {
	//if code is running, stop it
	if(this.runner) {
		this.stop(this.saveCode.bind(this, code, type, cb));
	} else {
		var filePath = Config.childNodeAppFilePath;
		if(type === 'tessel') {
			filePath = Config.childTesselAppFilePath;
		}
		//create folder / file if needed
		fs.writeFile(filePath, code, function(err) {
				if(err) {
						console.log(err);
				} else {
						console.log("[ChildApp] The file was saved!");
						if(cb) {
							cb();
						}
				}
		});
	}
};

ChildApp.prototype.runCode = function(code, type) {
	console.log("[ChildApp] runCode");
	//write code to file & run it
	this.saveCode(code, type, (function(){
		//run the code
		if(type === 'tessel') {
      this.cwd = path.dirname(Config.childTesselAppFilePath);
      this.numDataEventsReceived = 0;
			this.runner = childProcess.spawn("tessel", ["run", Config.childTesselAppFilePath], {cwd: this.cwd});
		} else {
      this.cwd = path.dirname(Config.childNodeAppFilePath);
      this.numDataEventsReceived = 0;
			//this.runner = process.spawn("node", [Config.childNodeAppFilePath], {cwd: path.dirname(Config.childNodeAppFilePath)});
			this.runner = childProcess.spawn("cmd", ["nvmw", "use", "iojs-v2.3.1"], {cwd: this.cwd});
			setTimeout((function(){
				//execute first command
				this.runner.stdin.write("node " + Config.childNodeAppFilePath + "\n");
			}).bind(this), 500);
		}
		this.runner.stdout.on('data', this.onRunnerData.bind(this));
		this.runner.stderr.on('data', this.onRunnerError.bind(this));
		this.runner.on('disconnect', this.onDisconnect.bind(this));
		this.runner.on('close', this.onClose.bind(this));
		this.runner.on('exit', this.onExit.bind(this));
	}).bind(this));
};

ChildApp.prototype.isRunning = function() {
	return (this.runner !== false);
};

ChildApp.prototype.stop = function(cb) {
	if(this.runner) {
		console.log("[ChildApp] execute stop");
		console.log(this.runner.pid);
		this.runner.stdout.removeAllListeners();
		this.runner.stderr.removeAllListeners();
		this.runner.stdin.end();
		//listen for runner events and execute callbacks
		var cbCalled = false;
		this.runner.on('disconnect', function(){
			if(cb && !cbCalled)
			{
				cb();
			}
		});
		this.runner.on('close', function(){
			if(cb && !cbCalled)
			{
				cb();
			}
		});
		this.runner.on('exit', function(){
			if(cb && !cbCalled)
			{
				cb();
			}
		});
		kill(this.runner.pid);
		this.runner = false;
	} else {
		if(cb) {
			cb();
		}
	}
};

ChildApp.prototype.onRunnerData = function(data) {
  this.numDataEventsReceived++;
  if(this.numDataEventsReceived < 3) {
    //ignore the first two messages
    return;
  }
  data = data.toString().trim();
  if(data.indexOf(this.cwd) === 0) {
    data = data.substr(this.cwd.length);
    if(data.length === 1) {
      return;
    }
  }
	this.emit('stdout-data', data);
};

ChildApp.prototype.onRunnerError = function(error) {
	this.emit('stderr-data', error.toString().trim());
};

ChildApp.prototype.onDisconnect = function() {
	console.log('[ChildApp] runner disconnected');
	this.runner = false;
};

ChildApp.prototype.onClose = function() {
	console.log('[ChildApp] runner closed');
	this.runner = false;
};

ChildApp.prototype.onExit = function() {
	console.log('[ChildApp] runner exited');
	this.runner = false;
};

module.exports = ChildApp;

}).call(this,require('_process'))

},{"../config":6,"_process":1}],6:[function(require,module,exports){
(function (global){
module.exports = (function(){

	var path = requireNode('path');

	if(!global.Config) {
		global.Config = {};

		// Retrieve local ip for Config
		var ip = '127.0.0.1', ifaces = requireNode('os').networkInterfaces();
		for (var dev in ifaces) {
			if(dev.indexOf('bridge') !== 0) {
				/* jshint ignore:start */
				ifaces[dev].forEach(function(details) {
					if (details.family === 'IPv4') {
						ip = details.address;
					}
				});
				/* jshint ignore:end */
			}
		}

		global.Config.childNodeAppFilePath = path.resolve('./child-app/node/app.js');
		global.Config.childTesselAppFilePath = path.resolve('./child-app/tessel/app.js');
		global.Config.ip = ip;

		global.Config.mobileServerUrl = "";
		global.Config.mobileServerUsername = "";
		global.Config.mobileServerPassword = "";

	}

	return global.Config;

})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],7:[function(require,module,exports){
module.exports = (function(){

	var SharedContentBase = require('shared/ContentBase');

	function ContentBase($slideHolder) {
		this.$slideHolder = $slideHolder;
		this.src = $slideHolder.attr('data-src');
		SharedContentBase.call(this, $slideHolder.attr('data-name'));
	}

	ContentBase.prototype = Object.create(SharedContentBase.prototype);

	ContentBase.prototype.startListeningForMessages = function() {
		//we work with jquery events to message to / from DOM nodes
		this._slideHolderMessageToSlildeHandler = this.slideHolderMessageToSlildeHandler.bind(this);
		this.$slideHolder.on('message-to-slide', this._slideHolderMessageToSlildeHandler);
	};

	ContentBase.prototype.stopListeningForMessages = function() {
		this.$slideHolder.off('message-to-slide', this._slideHolderMessageToSlildeHandler);
	};

	ContentBase.prototype.slideHolderMessageToSlildeHandler = function(event, message) {
		this.receiveMessage({data: message});
	};

	ContentBase.prototype.postMessage = function(data) {
		this.$slideHolder.trigger('message-from-slide', data);
	};

	return ContentBase;

})();

},{"shared/ContentBase":"shared/ContentBase"}],8:[function(require,module,exports){
module.exports = (function(){

  var self;

	function CodeElement(el) {
    self = this;
		this.el = el;
		this.$el = $(el);
		//wrap element in a container
		this.$wrapperEl = $(el).wrap('<div class="live-code-element live-code-code-element"></div>').parent();
		this.wrapperEl = this.$wrapperEl[0];

		this.id = this.$el.attr('data-id');
		if(!this.id)
		{
			//generate id
			this.id = 'code-' + Math.round(Math.random() * 1000 * new Date().getTime());
			this.$el.attr('data-id', this.id);
		}

		this.runtime = this.$el.data('runtime');
		if(!this.runtime)
		{
			this.runtime = 'browser';
		}

		this.console = this.$el.data('console');
		this.processor = this.$el.data('processor');

		//language is programming language - used for injecting in html
		this.language = this.$el.data('language');
		if(!this.language)
		{
			//default to javascript
			this.language = "javascript";
		}

		//mode is mode for codemirror
		this.mode = this.$el.data('mode');
		if(!this.mode)
		{
			//default to the language
			this.mode = this.language;
		}

		this.codeMirror = CodeMirror.fromTextArea(this.el, {
			lineNumbers: true,
			mode: this.mode,
			extraKeys: {"Ctrl-Space": "autocomplete"}
		});

		this.$el.css('width', '100%').css('height', '100%');
		this.layout();

    //disable keyboard bubbling up
    $(window).on('keydown', this.keyDownHandler);
	}

  CodeElement.prototype.keyDownHandler = function(e) {
    //cancel if code mirror has focus
    if(self.codeMirror.hasFocus()){
      e.stopImmediatePropagation();
    }
  };

	CodeElement.prototype.destroy = function() {
    $(window).off('keydown', this.keyDownHandler);
	};

	CodeElement.prototype.getValue = function() {
		return this.codeMirror.getValue();
	};

	CodeElement.prototype.layout = function() {
		this.$wrapperEl.find('.CodeMirror-scroll').css('max-height', this.$wrapperEl.css('height'));
		this.codeMirror.refresh();
	};

	return CodeElement;
})();

},{}],9:[function(require,module,exports){
module.exports = (function(){

  function ConsoleElement(el) {
    this.el = el;
    this.$el = $(el);
    //wrap element in a container
    this.$wrapperEl = $(el).wrap('<div class="live-code-element live-code-console-element unreset"></div>').parent();
    this.wrapperEl = this.$wrapperEl[0];

    this.id = this.$el.attr('data-id');
    if(!this.id)
    {
      //generate id
      this.id = 'code-' + Math.round(Math.random() * 1000 * new Date().getTime());
      this.$el.attr('data-id', this.id);
    }

    this.$el.css('width', '100%').css('height', '100%');

    this.logs = [];
  }

  ConsoleElement.prototype.destroy = function() {
  };

  function htmlEscape(str) {
    return String(str).replace(/&/g, '&amp;')
      .replace(/\"/g, '&quot;')
      .replace(/'/g, '&#39;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }

  function needsJSONConversion(arg) {
    if(
      typeof arg === 'number' ||
      typeof arg === 'string' ||
      typeof arg === 'boolean'
    ) {
      return false;
    }
    return true;
  }

  ConsoleElement.prototype.info = function(args) {
    var str = '';
    args.forEach(function(arg){
      if(str.length > 0) {
        str += ' ';
      }
      //is it an object or a simple type?
      if(needsJSONConversion(arg)) {
        arg = JSON.stringify(arg);
      }
      str += htmlEscape(arg);
    });
    this.logs.push('<pre>' + str + '</pre>');
    while(this.logs.length > 20) {
      this.logs.shift();
    }
    var html = this.logs.join('');
    this.el.innerHTML = html;
    this.wrapperEl.scrollTop = this.wrapperEl.scrollHeight;
  };

  ConsoleElement.prototype.error = function(args) {
    var str = '';
    args.forEach(function(arg){
      if(str.length > 0) {
        str += ' ';
      }
      //is it an object or a simple type?
      if(needsJSONConversion(arg)) {
        arg = JSON.stringify(arg);
      }
      str += htmlEscape(arg);
    });
    this.logs.push('<pre class="console-error">' + str + '</pre>');
    while(this.logs.length > 20) {
      this.logs.shift();
    }
    var html = this.logs.join('');
    this.el.innerHTML = html;
    this.wrapperEl.scrollTop = this.wrapperEl.scrollHeight;
  };

  return ConsoleElement;
})();

},{}],10:[function(require,module,exports){
module.exports = (function(){

	function WebPreviewElement(el) {
		this.el = el;
		this.$el = $(el);
		//wrap element in a container
		this.$wrapperEl = $(el).wrap('<div class="live-code-element live-code-web-preview-element"></div>').parent();
		this.wrapperEl = this.$wrapperEl[0];

		this.id = this.$el.attr('data-id');
		if(!this.id)
		{
			//generate id
			this.id = 'code-' + Math.round(Math.random() * 1000 * new Date().getTime());
			this.$el.attr('data-id', this.id);
		}

		this.console = this.$el.data('console');

		this.$el.css('width', '100%').css('height', '100%');
	}

	WebPreviewElement.prototype.destroy = function() {
	};

  WebPreviewElement.prototype.stop = function() {
    if(this.webview) {
      this.webview.parentNode.removeChild(this.webview);
      this.webview = false;
    }
  };

	WebPreviewElement.prototype.updateCode = function(blocks) {
		//create a webview tag
		if(this.webview) {
			this.webview.parentNode.removeChild(this.webview);
			this.webview = false;
		}
		this.webview = document.createElement('webview');
		this.webview.style.width = '100%';
		this.webview.style.height = '100%';
		this.el.appendChild(this.webview);

		var htmlSrc = '';
		//add some extra javascript to the htmlSrc to forward console logs
		htmlSrc += "<script>\n";
		htmlSrc += "console.log = function(){\n";
		htmlSrc += "args = [];\n";
		htmlSrc += "[].forEach.call(arguments, function(argument){\n";
		htmlSrc += "args.push(argument);\n";
		htmlSrc += "});\n";
		htmlSrc += "require('ipc').sendToHost('console.log', JSON.stringify({args: args}));\n";
		htmlSrc += "}\n";
		htmlSrc += "console.error = function(){\n";
		htmlSrc += "args = [];\n";
		htmlSrc += "[].forEach.call(arguments, function(argument){\n";
		htmlSrc += "args.push(argument);\n";
		htmlSrc += "});\n";
		htmlSrc += "require('ipc').sendToHost('console.error', JSON.stringify({args: args}));\n";
		htmlSrc += "}\n";
		htmlSrc += "</script>";
		for(var i = 0; i < blocks.length; i++)
		{
			htmlSrc += blocks[i].code;
		}

		this.webview.addEventListener("dom-ready", (function(){
      if(this.$el.attr('data-open-devtools')) {
        this.webview.openDevTools();
      }
		}).bind(this));

		this.webview.addEventListener('ipc-message', (function(event) {
			if(event.channel === 'request-html')
			{
				this.webview.send('receive-html', htmlSrc);
			}
			else if(event.channel === 'console.log')
			{
				//notify live code editor
				this.$wrapperEl.trigger('console.log', event.args[0]);
			}
			else if(event.channel === 'console.error')
			{
				//notify live code editor
				this.$wrapperEl.trigger('console.error', event.args[0]);
			}
		}).bind(this));

		this.webview.setAttribute('nodeintegration', '');
		this.webview.setAttribute('src', 'webpreview.html');
	};

	return WebPreviewElement;
})();

},{}],11:[function(require,module,exports){
(function(){

	var Presentation = require('./classes/Presentation');

  function init() {
  	if($('#presentation').length > 0) {
      initPresentation();
  	}
  }

  function initPresentation() {
    function getSettings(cb) {
      $.getJSON('../settings.json')
      .done(function(result){
        settings = result;
        cb();
      })
      .error(function(err){
        cb();
      });
    }

    function getData(cb) {
      $.getJSON('../data.json')
      .done(function(result){
        console.log("data result");
        data = result;
        cb();
      })
      .error(function(err){
        cb();
      });
    }

    var settings = {};
    var data = {};

    getSettings(getData.bind(this, function(){
      new Presentation(data, 'presentation', settings);
    }));

  }

	init();

})();

},{"./classes/Presentation":3}],"Constants":[function(require,module,exports){
module.exports = (function(){

	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_SLIDES : 'setSlides',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		MESSAGE : 'message',
		SOCKET_SEND : 'socketSend',
		SOCKET_RECEIVE : 'socketReceive',
		JOIN_SLIDE_ROOM : 'joinSlideRoom',
		LEAVE_SLIDE_ROOM : 'leaveSlideRoom',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		CHILD_APP_SAVE_CODE : 'childAppSaveCode',
		CHILD_APP_RUN_CODE : 'childAppRunCode',
		CHILD_APP_STDOUT_DATA : 'childAppStdoutData',
		CHILD_APP_STDERR_DATA : 'childAppStderrData',

		OPEN_COMMAND_LINE: 'openCommandLine',
		OPEN_CAMERA: 'openCamera',

    SET_TEAM : 'setTeam',
    UPDATE_MOTION : 'updateMotion',

    YOU_WIN : 'youWin',
    YOU_LOSE : 'youLose',

    SHAKE_YOUR_PHONES_INTRO : 'shakeYourPhonesIntro',
    SHAKE_YOUR_PHONES_GAME : 'shakeYourPhonesGame',
    SHAKE_YOUR_PHONES_FINISHED : 'shakeYourPhonesFinished',

    SHAKE_YOUR_PHONES_CLIENT_ADDED : 'shakeYourPhonesClientAdded',
    SHAKE_YOUR_PHONES_CLIENT_REMOVED : 'shakeYourPhonesClientRemoved',
    SHAKE_YOUR_PHONES_CLIENT_LIST : 'shakeYourPhonesClientList',
    SHAKE_YOUR_PHONES_CLIENT_UPDATE : 'shakeYourPhonesClientUpdate'
	};

	return Constants;

})();

},{}],"shared/ContentBase":[function(require,module,exports){
module.exports = (function(){

  var Constants = require('Constants');

  function ContentBase(name) {
    this.name = name;
    this.fps = 60;
    this._animationFrameId = false;
    this._currentTime = 0;
    this._delta = 0;
    this._interval = false;
    this._lastTime = new Date().getTime();
    this.currentFrame = 0;

    this.startListeningForMessages();

    this.__drawLoop = this._drawLoop.bind(this);
    this._interval = 1000 / this.fps;
  }

  ContentBase.prototype.startListeningForMessages = function() {
    this._receiveMessage = this.receiveMessage.bind(this);
    window.addEventListener("message", this._receiveMessage, false);
  };

  ContentBase.prototype.stopListeningForMessages = function() {
    window.removeEventListener('message', this._receiveMessage);
  };

  ContentBase.prototype.receiveMessage = function(event) {
    if(!event.data) {
      return;
    }
    switch(event.data.action) {
      case 'setState':
        this.setState(event.data.state);
        break;
      case 'destroy':
        this.destroy();
        break;
      case Constants.SOCKET_RECEIVE:
        this.receiveSocketMessage(event.data.message);
        break;
      default:
        this.handleMessage(event.data);
        break;
    }
  };

  ContentBase.prototype.destroy = function() {
    console.log('destroy called', this.name);
    this.stopListeningForMessages();
    window.cancelAnimationFrame(this._animationFrameId);
  };

  ContentBase.prototype.postMessage = function(data) {
    parent.postMessage(data, "*");
  };

  ContentBase.prototype.handleMessage = function(data) {
  };

  ContentBase.prototype.postSocketMessage = function(message) {
    this.postMessage({
      action: Constants.SOCKET_SEND,
      message: message
    });
  };

  ContentBase.prototype.receiveSocketMessage = function(message) {
    //console.log('ContentBase.prototype.receiveSocketMessage ' + this.name, message);
  };

  ContentBase.prototype.setState = function(state) {
    if(state !== this.state) {
      this.state = state;
      this.onStateChanged();
      if(this.state === Constants.STATE_ACTIVE) {
        this.currentFrame = 0;
        this._drawLoop();
      } else {
        window.cancelAnimationFrame(this._animationFrameId);
      }
    }
  };

  ContentBase.prototype.onStateChanged = function() {
  };

  ContentBase.prototype._drawLoop = function() {
    this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
    this._currentTime = (new Date()).getTime();
      this._delta = (this._currentTime - this._lastTime);
      if(this._delta > this._interval) {
        this.currentFrame++;
        this.drawLoop(this._delta);
        this._lastTime = this._currentTime - (this._delta % this._interval);
      }
  };

  ContentBase.prototype.drawLoop = function(delta) {
  };

  return ContentBase;

})();

},{"Constants":"Constants"}],"shared/MobileServerBridge":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		this.presentation = presentation;
		this.url = url;
		this.connect();
	}

	MobileServerBridge.prototype.connect = function() {
		console.log('MobileServerBridge.connect');
		$.post(this.url + '/login', this.getLoginCredentials()).done(this.loginHandler.bind(this))
		.fail((function() {
			//retry after one second
			setTimeout((function(){
				this.connect();
			}).bind(this), 1000);
	  }).bind(this));
	};

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {};
	};

	MobileServerBridge.prototype.loginHandler = function(result) {
		this.token = result.token;
		this.socket = io(this.url, {
			query: 'token=' + this.token,
			reconnection: false,
			forceNew: true
		});
		this.socket.on('connect', this.socketConnectHandler.bind(this));
		this.socket.on('disconnect', this.socketDisconnectHandler.bind(this));
		this.socket.on('message', this.socketMessageHandler.bind(this));
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		console.log('MobileServerBridge.socketConnectHandler');
		this.presentation.mobileServerBridgeConnected();
	};

	MobileServerBridge.prototype.socketDisconnectHandler = function() {
		this.connect();
	};

	MobileServerBridge.prototype.tryToSend = function() {
		if(this.socket) {
			this.socket.emit.apply(this.socket, arguments);
		}
	};

	MobileServerBridge.prototype.socketMessageHandler = function(message) {
		this.presentation.mobileServerMessageHandler(message);
	};

	return MobileServerBridge;
})();
},{"Constants":"Constants"}],"shared/Presentation":[function(require,module,exports){
module.exports = (function(){

  var Constants = require('Constants');
  var SlideBridge = require('./SlideBridge');

  /*
   * data: json object with slides array property
   * role: mobile or presentation
   */
  function Presentation(data, role) {
    this.data = data;
    this.role = role;
    this.currentSlideIndex = -1;
    this.slideHolders = [];
    this.numSlideHolders = 3;
    this.slideBridges = [];
    this.slideBridgesBySlideName = {};

    this.createSlideHolders();
    this.createSlideBridges(this.data);

    this.mobileServerBridge = this.createMobileServerBridge();
    this.startListeningForMessages();

    this.setCurrentSlideIndex(0);
  }

  Presentation.prototype.startListeningForMessages = function() {
    window.addEventListener("message", this.slideMessageHandler.bind(this), false);
  };

  Presentation.prototype.createSlideHolders = function() {
    for(var i = 0; i < this.numSlideHolders; i++) {
      var $slideHolder = $('<iframe class="slide-frame" />');
      this.slideHolders.push($slideHolder);
      $('#presentation').append($slideHolder);
    }
  };

  Presentation.prototype.createSlideBridges = function(data) {
    var that = this;
    var numSlides = data.slides.length;
    for(var i = 0; i < numSlides; i++) {
      var slideBridge = this.createSlideBridge(data.slides[i]);
      this.slideBridges.push(slideBridge);
      this.slideBridgesBySlideName[slideBridge.name] = slideBridge;
    }
  };

  Presentation.prototype.createSlideBridge = function(slide) {
    return new SlideBridge(slide);
  };

  Presentation.prototype.slideMessageHandler = function(event) {
    if(!event.data) {
      return;
    }
    switch(event.data.action) {
      case Constants.SOCKET_SEND:
        if(this.mobileServerBridge) {
          this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);
        }
        break;
    }
  };

  Presentation.prototype.mobileServerBridgeConnected = function() {
    //join the rooms of the slideHolders
    for(var i = 0; i < this.numSlideHolders; i++) {
      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.slideHolders[i]).attr('data-name'));
    }
  };

  Presentation.prototype.mobileServerMessageHandler = function(message) {
    if(message.target.slide) {
      //slide has to handle the message
      var slideBridge = this.getSlideBridgeByName(message.target.slide);
      if(slideBridge) {
        slideBridge.tryToPostMessage({
          action: Constants.SOCKET_RECEIVE,
          message: message
        });
      }
    } else {
      //presentation has to handle the message
      this.handleMobileServerMessage(message);
    }
  };

  Presentation.prototype.handleMobileServerMessage = function(message) {
    console.log('[shared/Presentation] handleMobileServerMessage', message);
  };

  Presentation.prototype.getSlideBridgeByIndex = function(index) {
    if(index >= 0 && index < this.slideBridges.length) {
      return this.slideBridges[index];
    }
    return false;
  };

  Presentation.prototype.getSlideBridgeByName = function(slideName) {
    return this.slideBridgesBySlideName[slideName];
  };

  Presentation.prototype.getSlideHolderForSlide = function(slide, slidesNotToClear) {
    if(slide) {
      var $slideHolder = $('.slide-frame[data-name="' + slide.name + '"]');
      if($slideHolder.length > 0) {
        return $slideHolder[0];
      }
      //get a free slideHolder
      var slideNamesNotToClear = [];
      $(slidesNotToClear).each(function(index, obj){
        slideNamesNotToClear.push(obj.name);
      });
      var $slideHolders = $('.slide-frame');
      for (var i = $slideHolders.length - 1; i >= 0; i--) {
        $slideHolder = $($slideHolders[i]);
        var name = $slideHolder.attr('data-name');
        if(!name || slideNamesNotToClear.indexOf(name) === -1) {
          return $slideHolder[0];
        }
      }
    }
    return false;
  };

  Presentation.prototype.goToPreviousSlide = function() {
    this.setCurrentSlideIndex(this.currentSlideIndex - 1);
  };

  Presentation.prototype.goToNextSlide = function() {
    this.setCurrentSlideIndex(this.currentSlideIndex + 1);
  };

  Presentation.prototype.setCurrentSlideIndex = function(value) {
    value = Math.max(0, Math.min(value, this.slideBridges.length - 1));
    if(value !== this.currentSlideIndex) {
      this.currentSlideIndex = value;

      var currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);
      var previousSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex - 1);
      var nextSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex + 1);

      //remove "used" class from slide holders
      $('.slide-frame').removeAttr('data-used', false);

      var currentSlideHolder = this.getSlideHolderForSlide(currentSlideBridge, [previousSlideBridge, nextSlideBridge]);
      this.setupSlideHolder(currentSlideHolder, currentSlideBridge, Constants.STATE_ACTIVE, 0);

      var previousSlideHolder = this.getSlideHolderForSlide(previousSlideBridge, [currentSlideBridge, nextSlideBridge]);
      this.setupSlideHolder(previousSlideHolder, previousSlideBridge, Constants.STATE_INACTIVE, '-100%');

      var nextSlideHolder = this.getSlideHolderForSlide(nextSlideBridge, [previousSlideBridge, currentSlideBridge]);
      this.setupSlideHolder(nextSlideHolder, nextSlideBridge, Constants.STATE_INACTIVE, '100%');

      //clear attributes of unused slide frames
      $('.slide-frame').each(function(index, slideHolder){
        if(!$(slideHolder).attr('data-used')) {
          console.log('clear slide holder');
          $(slideHolder).removeAttr('data-used').removeAttr('data-name').removeAttr('data-src');
        }
      });

      //all other slideHolder bridges should be unlinked from their slideHolder
      this.slideBridges.forEach(function(slideBridge){
        if(slideBridge === currentSlideBridge) {
          return;
        }
        if(slideBridge === previousSlideBridge) {
          return;
        }
        if(slideBridge === nextSlideBridge) {
          return;
        }
        slideBridge.slideHolder = null;
      });

      bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);
    }
  };

  Presentation.prototype.setupSlideHolder = function(slideHolder, slideBridge, state, left) {
    if(slideHolder) {
      var src = "slides/" + slideBridge.name + '.html';
      if(slideBridge.data[this.role] && slideBridge.data[this.role].url) {
        src = slideBridge.data[this.role].url;
      }
      src = this.processSlideSrc(src);
      if(slideBridge.isAlreadyCorrectlyAttached(slideHolder, src)) {
        //console.log(slideBridge.name + ' already attached');
      } else {
        this.attachToSlideHolder(slideHolder, slideBridge, src);
      }
      slideBridge.setState(state);
      $(slideHolder).css('left', left);
      $(slideHolder).attr('data-used', 1);
    }
  };

  Presentation.prototype.attachToSlideHolder = function(slideHolder, slideBridge, src) {
    //leave previous channel of this slideHolder
    if(this.mobileServerBridge) {
      this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(slideHolder).attr('data-name'));
    }
    //add the join as a callback for the onload event
    slideBridge.attachToSlideHolder(slideHolder, src, this.slideLoaded.bind(this, slideHolder, slideBridge, src));
  };

  Presentation.prototype.slideLoaded = function(slideHolder, slideBridge) {
    //join new channel
    if(this.mobileServerBridge) {
      this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(slideHolder).attr('data-name'));
    }
  };

  Presentation.prototype.processSlideSrc = function(src) {
    return src;
  };

  Presentation.prototype.createMobileServerBridge = function() {
    //to implement in extending classes
  };

  return Presentation;

})();

},{"./SlideBridge":"shared/SlideBridge","Constants":"Constants"}],"shared/SlideBridge":[function(require,module,exports){
module.exports = (function(){
	function getIframeWindow(iframe_object) {
		var doc;

		if (iframe_object.contentWindow) {
			return iframe_object.contentWindow;
		}

		if (iframe_object.window) {
			return iframe_object.window;
		}

		if (!doc && iframe_object.contentDocument) {
			doc = iframe_object.contentDocument;
		}

		if (!doc && iframe_object.document) {
			doc = iframe_object.document;
		}

		if (doc && doc.defaultView) {
		 return doc.defaultView;
		}

		if (doc && doc.parentWindow) {
			return doc.parentWindow;
		}

		return undefined;
	}

	function SlideBridge(data) {
		this.data = data;
		this.name = this.data.name;
	}

	SlideBridge.prototype.isAlreadyCorrectlyAttached = function(slideHolder, src) {
		return (this.slideHolder === slideHolder && $(slideHolder).attr('data-name') === this.name && $(slideHolder).attr('data-src') === src);
	};

	SlideBridge.prototype.attachToSlideHolder = function(slideHolder, src, cb) {
		//notify the content it is being cleared
		this.tryToPostMessage({action: 'destroy'});
		this.slideHolder = slideHolder;
		$(slideHolder).off('load');
		$(slideHolder).attr('data-name', this.name);
		$(slideHolder).addClass('loading');
		if(src !== $(slideHolder).attr('data-src')) {
			$(slideHolder).on('load', (function(event){
				$(slideHolder).removeClass('loading');
				this.tryToPostMessage({
					action: 'setState',
					state: this.state
				});
				cb();
			}).bind(this));
			$(slideHolder).attr('data-src', src);
			$(slideHolder).attr('src', src);
		}
	};

	SlideBridge.prototype.setState = function(state) {
		this.state = state;
		this.tryToPostMessage({
			action: 'setState',
			state: this.state
		});
	};

	SlideBridge.prototype.tryToPostMessage = function(message) {
		if(!this.slideHolder) {
			return;
		}
		var w = getIframeWindow(this.slideHolder);
		if(w) {
			w.postMessage(message, "*");
		}
	};

	return SlideBridge;
})();

},{}],"slides/LiveCode":[function(require,module,exports){
module.exports = (function(){
  var ContentBase = require('../ContentBase');
  var Constants = require('Constants');

  var ConsoleElement = require('./ConsoleElement');
  var CodeElement = require('./CodeElement');
  var WebPreviewElement = require('./WebPreviewElement');

  function LiveCode($slideHolder) {
    ContentBase.call(this, $slideHolder);

    //create the consoles
    this.consoleElements = {};
    this.$slideHolder.find('[data-type="console"]').each((function(index, consoleEl){
      this.createConsoleElement(consoleEl);
    }).bind(this));

    //create the previews
    this.webPreviewElements = {};
    this.$slideHolder.find('[data-type="web-preview"]').each((function(index, webPreviewEl){
      this.createWebPreviewElement(webPreviewEl);
    }).bind(this));

    //create the code editors
    this.codeElements = {};
    this.$slideHolder.find('[data-type="code"]').each((function(index, codeEl){
      this.createCodeElement(codeEl);
    }).bind(this));

    //create run buttons
    this.runButtonEls = [];
    this.$slideHolder.find('[data-type="run-button"]').each((function(index, runButtonEl){
      this.createRunButton(runButtonEl);
    }).bind(this));
  }

  LiveCode.prototype = Object.create(ContentBase.prototype);

  LiveCode.prototype.destroy = function() {
    ContentBase.prototype.destroy.call(this);
    var key;
    for(key in this.consoleElements)
    {
      this.destroyConsoleElement(this.consoleElements[key]);
    }
    for(key in this.webPreviewElements)
    {
      this.destroyWebPreviewElement(this.webPreviewElements[key]);
    }
    for(key in this.codeElements)
    {
      this.destroyCodeElement(this.codeElements[key]);
    }
    for(key = 0; key < this.runButtonEls.length; key++)
    {
      this.destroyRunButton(this.runButtonEls[key]);
    }
  };

  LiveCode.prototype.onStateChanged = function() {
    //stop running apps when not active
    if(this.state !== Constants.STATE_ACTIVE)
    {
      //stop the web previews
      for(var key in this.webPreviewElements)
      {
        this.webPreviewElements[key].stop();
      }
      //node child apps get stopped in presentation
    }
  };

  LiveCode.prototype.layout = function() {
    //might be triggered after split pane resize or tab switch
    //codemirror instances need to be updated
    for(var key in this.codeElements)
    {
      this.codeElements[key].layout();
    }
  };

  LiveCode.prototype.createConsoleElement = function(consoleEl) {
    var consoleElement = new ConsoleElement(consoleEl);
    this.consoleElements[consoleElement.id] = consoleElement;
  };

  LiveCode.prototype.destroyConsoleElement = function(consoleElement) {
    consoleElement.destroy();
  };

  LiveCode.prototype.createWebPreviewElement = function(webPreviewEl) {
    var webPreviewElement = new WebPreviewElement(webPreviewEl);
    webPreviewElement.$wrapperEl.on('console.log', this.webPreviewConsoleLogHandler.bind(this, webPreviewElement));
    webPreviewElement.$wrapperEl.on('console.error', this.webPreviewConsoleErrorHandler.bind(this, webPreviewElement));
    this.webPreviewElements[webPreviewElement.id] = webPreviewElement;
  };

  LiveCode.prototype.destroyWebPreviewElement = function(webPreviewElement) {
    webPreviewElement.$wrapperEl.off('console.log');
    webPreviewElement.$wrapperEl.off('console.error');
    webPreviewElement.destroy();
  };

  LiveCode.prototype.createCodeElement = function(codeEl) {
    var codeElement = new CodeElement(codeEl);
    this.codeElements[codeElement.id] = codeElement;
  };

  LiveCode.prototype.destroyCodeElement = function(codeElement) {
    codeElement.destroy();
  };

  LiveCode.prototype.createRunButton = function(runButtonEl) {
    this.runButtonEls.push(runButtonEl);
    $(runButtonEl).on('click', (function(){
      //run code in target element
      if(this.codeElements[$(runButtonEl).data('target')]) {
        this.runCode(this.codeElements[$(runButtonEl).data('target')]);
      }
    }).bind(this));
  };

  LiveCode.prototype.destroyRunButton = function(runButtonEl) {
    $(runButtonEl).off('click');
  };

  LiveCode.prototype.runCode = function(codeElement) {
    var code = codeElement.getValue();
    //where do we run this code? nodejs or in browser?
    if(codeElement.runtime === 'node')
    {
      //run as child-app
      this.postMessage({
        action: Constants.CHILD_APP_RUN_CODE,
        code: code
      });
    }
    else
    {
      //get the web preview element which is handling this code
      var webPreviewElement = this.getWebPreviewElementForCodeElement(codeElement);
      if(webPreviewElement)
      {
        this.updateWebPreviewElement(webPreviewElement);
      }
    }
  };

  LiveCode.prototype.handleMessage = function(message) {
    var consoleElement;
    if(message.action === Constants.CHILD_APP_STDOUT_DATA)
    {
      consoleElement = this.getConsoleElementForRuntime('node');
      if(consoleElement)
      {
        consoleElement.info([message.data]);
      }
    }
    else if(message.action === Constants.CHILD_APP_STDERR_DATA)
    {
      consoleElement = this.getConsoleElementForRuntime('node');
      if(consoleElement)
      {
        consoleElement.error([message.data]);
      }
    }
  };

  LiveCode.prototype.webPreviewConsoleLogHandler = function(webPreviewElement, event, message) {
    //get the console element for this web preview
    var consoleElement = this.getConsoleElementForWebPreview(webPreviewElement);
    if(consoleElement)
    {
      consoleElement.info(JSON.parse(message).args);
    }
  };

  LiveCode.prototype.webPreviewConsoleErrorHandler = function(webPreviewElement, event, message) {
    //get the console element for this web preview
    var consoleElement = this.getConsoleElementForWebPreview(webPreviewElement);
    if(consoleElement)
    {
      consoleElement.error(JSON.parse(message).args);
    }
  };

  LiveCode.prototype.getConsoleElementForRuntime = function(runtime) {
    //<textarea id="node-code" data-type="code" data-runtime="node" data-console="node-console" data-language="javascript">
    for(var key in this.codeElements)
    {
      var codeElement = this.codeElements[key];
      if(codeElement.runtime === runtime && this.consoleElements[codeElement.console])
      {
        return this.consoleElements[codeElement.console];
      }
    }
    return false;
  };

  LiveCode.prototype.getConsoleElementForWebPreview = function(webPreviewElement) {
    return this.consoleElements[webPreviewElement.console];
  };

  LiveCode.prototype.getWebPreviewElementForCodeElement = function(codeElement) {
    return this.webPreviewElements[codeElement.processor];
  };

  LiveCode.prototype.updateWebPreviewElement = function(webPreviewElement) {
    //gather all the code for this element
    var blocks = [];
    for(var key in this.codeElements)
    {
      var codeElement = this.codeElements[key];
      if(codeElement.processor === webPreviewElement.id)
      {
        var block = {
          language: codeElement.language,
          code: codeElement.getValue()
        };
        blocks.push(block);
      }
    }
    webPreviewElement.updateCode(blocks);
  };

  LiveCode.prototype.saveClickHandler = function() {
    var code = this.codeMirror.getValue();
    this.postMessage({
      action: Constants.CHILD_APP_SAVE_CODE,
      code: code,
      type: this.type
    });
    this.postMessage({
      action: Constants.OPEN_COMMAND_LINE
    });
  };

  LiveCode.prototype.runClickHandler = function() {
    var code = this.codeMirror.getValue();
    this.postMessage({
      action: Constants.CHILD_APP_RUN_CODE,
      code: code,
      type: this.type
    });
    this.postMessage({
      action: Constants.OPEN_CAMERA
    });
  };

  return LiveCode;

})();

},{"../ContentBase":7,"./CodeElement":8,"./ConsoleElement":9,"./WebPreviewElement":10,"Constants":"Constants"}],"slides/MegaPuddingSlide":[function(require,module,exports){
module.exports = (function(){
  var ContentBase = require('../ContentBase');
  var Constants = require('Constants');

  function MegaPuddingSlide($slideHolder) {
    ContentBase.call(this, $slideHolder);

    this.$webview = $slideHolder.find('webview');
    this.webview = this.$webview[0];

    this.webview.addEventListener("dom-ready", (function(){
      //this.webview.openDevTools();
    }).bind(this));
  }

  MegaPuddingSlide.prototype = Object.create(ContentBase.prototype);

  MegaPuddingSlide.prototype.destroy = function() {
    ContentBase.prototype.destroy.call(this);
  };

  MegaPuddingSlide.prototype.onStateChanged = function() {
    if(this.state === Constants.STATE_ACTIVE) {
      this.webview.setAttribute('src', 'slides/megapudding/index.html');
    } else {
      this.webview.setAttribute('src', '');
    }
  };

  return MegaPuddingSlide;

})();

},{"../ContentBase":7,"Constants":"Constants"}],"slides/ShakeYourPhonesSlide":[function(require,module,exports){
module.exports = (function(){

  var ContentBase = require('../ContentBase');
  var Constants = require('Constants');

  var teamColors = [
    '#c6363d', //red
    '#0684AF'  //blue
  ];

  var self;

  function ShakeYourPhones($slideHolder) {
    ContentBase.call(this, $slideHolder);

    self = this;

    this.gameDuration = 13; //game lasts 10 seconds
    this.clientsMap = {};
    this.clientsByTeam = [
      [],
      []
    ];
    this.motions = [0, 0];
    this.music = this.$slideHolder.find('#music')[0];

    this.$slideHolder.find('#ip').text('bbridges.herokuapp.com');

    this.$slideHolder.find('.substate-intro .btn').on('click', this.startClickHandler.bind(this));

    this.$teamBlocks = this.$slideHolder.find('.team');
    this.$teamBlocks.css({
      position: 'absolute',
      height: '100%',
      top: 0
    });
    $(this.$teamBlocks[0]).css('background-color', teamColors[0]);
    $(this.$teamBlocks[1]).css('background-color', teamColors[1]);
    this.displayMotions();

    this.setSubstate(Constants.SHAKE_YOUR_PHONES_INTRO);
  }

  ShakeYourPhones.prototype = Object.create(ContentBase.prototype);

  ShakeYourPhones.prototype.setSubstate = function(substate) {
    if(this.substate !== substate) {
      this.substate = substate;
      //send substate to mobile clients
      this.postSocketMessage({
        target: {
          client: 'mobile',
          slide: 'shake-your-phones'
        },
        content: {
          action: Constants.SET_SUBSTATE,
          substate: this.substate
        }
      });
      if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
        this.resetMotion();
      }
      this.showCurrentState();
    }
  };

  ShakeYourPhones.prototype.receiveSocketMessage = function(message) {
    if(!message.content) {
      return;
    }
    if(message.content.action === 'updateRoomList') {
      //message.content.ids is an array with ids in this room
      var clientMapIds = _.keys(this.clientsMap);
      //which ids are new? (in message.content.ids but not in clientsMap)
      var newClientIds = _.difference(message.content.ids, clientMapIds);
      //which ids need to be removed? (in clientsMap but not in message.content.ids)
      var removeClientIds = _.difference(clientMapIds, message.content.ids);
      //update our map
      newClientIds.forEach(function(id){
        this.clientsMap[id] = {
          id: id,
          teamNr: -1,
          motion: 0,
          size: 10
        };
        //add to the smallest team
        var teamNr = (this.clientsByTeam[0].length < this.clientsByTeam[1].length) ? 0 : 1;
        this.clientsMap[id].teamNr = teamNr;
        //send a message to this client
        this.postSocketMessage({
          target: {
            client: id,
            slide: 'shake-your-phones'
          },
          content: {
            action: Constants.SET_TEAM,
            team: teamNr
          }
        });
       this.postSocketMessage({
          target: {
            client: 'mobile',
            slide: 'shake-your-phones'
          },
          content: {
            action: Constants.SET_SUBSTATE,
            substate: this.substate
          }
        });
        //update the list
        this.updateClientsByTeam();
      }, this);
      removeClientIds.forEach(function(id){
          if(this.clientsMap[id]) {
              //this.clientsMap[id].$div.remove();
          }
          delete this.clientsMap[id];
          this.updateClientsByTeam();
      }, this);

      this.numClientsChanged();
    } else if(message.content.action === Constants.UPDATE_MOTION) {
      if(!message.sender) {
        return;
      }
      //message.sender.id contains the origin id
      if(!this.clientsMap[message.sender.id]) {
        return;
      }
      this.clientsMap[message.sender.id].motion = Math.min(130, message.content.motion); //limit max motion to 130
    }
  };

  ShakeYourPhones.prototype.updateClientsByTeam = function() {
    this.clientsByTeam = [
      [],
      []
    ];
    $.each(this.clientsMap, function(id, client){
      if(client.teamNr !== -1) {
        self.clientsByTeam[client.teamNr].push(client);
      }
    });
  };

  ShakeYourPhones.prototype.startClickHandler = function() {
      this.setSubstate(Constants.SHAKE_YOUR_PHONES_GAME);
  };

  ShakeYourPhones.prototype.resetMotion = function() {
    this.motions = [0, 0];
    for(var id in this.clientsMap) {
      this.clientsMap[id].motion = 0;
    }
  };

  ShakeYourPhones.prototype.numClientsChanged = function() {
      this.$slideHolder.find('#connections span').text(_.keys(this.clientsMap).length);
  };

  ShakeYourPhones.prototype.showCurrentState = function() {
    this.$slideHolder.find('.substate').removeClass('active');
    this.$slideHolder.find('.slide').css({
      backgroundImage: 'none'
    });
    if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
      this.music.play();
      this.$slideHolder.find('.substate-game .countdown').html(this.gameDuration);
      this.$slideHolder.find('.substate-game').addClass('active');
      this.countDownTimeout = setTimeout(this.countDownHandler.bind(this, this.gameDuration - 1), 1000);
    } else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {
      //show winner
      var ratio = this.calculateRatio();
      var winningTeam = (ratio > 0.5) ? 0 : 1;
      var winningTeamColor = (winningTeam === 0) ? "red" : "blue";
      this.$slideHolder.find('.substate-finished h1').text('Team ' + winningTeamColor + ' wins!');
      this.$slideHolder.find('.substate-finished').addClass('active');
      //notify the mobile clients
      var winningIds = [];
      var losingIds = [];
      $.each(this.clientsMap, function(id, client){
        if(client.teamNr === winningTeam) {
          winningIds.push(id);
        }
        else {
          losingIds.push(id);
        }
      });
      this.postSocketMessage({
        target: {
          client: winningIds,
          slide: 'shake-your-phones'
        },
        content: {
          action: Constants.YOU_WIN
        }
      });
      this.postSocketMessage({
        target: {
          client: losingIds,
          slide: 'shake-your-phones'
        },
        content: {
          action: Constants.YOU_LOSE
        }
      });
    } else {
      this.$slideHolder.find('.slide').css({
        backgroundRepeat: 'no-repeat',
        backgroundSize: 'contain',
        backgroundPosition: 'center center',
        backgroundImage: 'url(slides/images/iphone-connections.png)'
      });
      this.$slideHolder.find('.substate-intro').addClass('active');
    }
  };

  ShakeYourPhones.prototype.countDownHandler = function(timeLeft) {
    this.$slideHolder.find('.substate-game .countdown').html(timeLeft);
    if(timeLeft > 0) {
      this.countDownTimeout = setTimeout(this.countDownHandler.bind(this, timeLeft - 1), 1000);
    } else {
      this.setSubstate(Constants.SHAKE_YOUR_PHONES_FINISHED);
    }
  };

  ShakeYourPhones.prototype.drawLoop = function() {
    if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
      //calculate current motions
      var currentMotions = [0, 0];
      $.each(this.clientsMap, function(id, client){
        if(client.teamNr > -1 && client.motion) {
          currentMotions[client.teamNr] += client.motion;
        }
      });
      //take average motion
      currentMotions[0] /= this.clientsByTeam[0].length;
      currentMotions[1] /= this.clientsByTeam[1].length;
      //add to motion
      this.motions[0] += currentMotions[0];
      this.motions[1] += currentMotions[1];
      //ease it
      this.motions[0] *= 0.97;
      this.motions[1] *= 0.97;
      //visualize it
      this.displayMotions();
    }
  };

  ShakeYourPhones.prototype.calculateRatio = function() {
    var totalMotion = this.motions[0] + this.motions[1];
    var ratio = (totalMotion > 0) ? this.motions[0] / totalMotion : 0.5;
    return ratio;
  };

  ShakeYourPhones.prototype.displayMotions = function() {
    var ratio = this.calculateRatio();
    //console.log(this.motions[0], this.motions[1], totalMotion, ratio);
    $(this.$teamBlocks[0]).css({
      left: 0,
      width: (ratio * 100) + '%'
    });
    $(this.$teamBlocks[1]).css({
      right: 0,
      width: (100 - (ratio * 100)) + '%'
    });
  };

  return ShakeYourPhones;

})();

},{"../ContentBase":7,"Constants":"Constants"}],"slides/VideoSlide":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
  var Constants = require('Constants');

	function VideoSlide($slideHolder) {
		ContentBase.call(this, $slideHolder);

		this.videoPlaying = false;
		var videoUrl = getParameterByName(this.src, 'video');
    var loop = getParameterByName(this.src, 'loop');
    var muted = getParameterByName(this.src, 'muted');

		this.video = this.$slideHolder.find('video')[0];
    if(loop === "1") {
      $(this.video).attr('loop', "loop");
    }
    if(muted === "1") {
      $(this.video).attr('muted', "muted");
    }
		$(this.video).attr('src', videoUrl);
		this._clickHandler = this.clickHandler.bind(this);
		$(this.video).on('click', this._clickHandler);
	}

	VideoSlide.prototype = Object.create(ContentBase.prototype);

	VideoSlide.prototype.destroy = function() {
		ContentBase.prototype.destroy.call(this);
		$(this.video).off('click', this._clickHandler);
	};

  VideoSlide.prototype.onStateChanged = function() {
    if(this.state === Constants.STATE_ACTIVE) {
      this.setVideoPlaying(true);
    } else {
      this.setVideoPlaying(false);
    }
  };

	VideoSlide.prototype.clickHandler = function(event) {
		this.toggleVideoPlaying();
	};

  VideoSlide.prototype.setVideoPlaying = function(value) {
    if(value !== this.videoPlaying) {
      this.videoPlaying = value;
      if(this.videoPlaying) {
        this.video.play();
      } else {
        this.video.pause();
      }
    }
  };

  VideoSlide.prototype.toggleVideoPlaying = function() {
    this.setVideoPlaying(!this.videoPlaying);
  };

	function getParameterByName(url, name) {
		name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
		var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
		results = regex.exec(url);
		return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	}

	return VideoSlide;

})();

},{"../ContentBase":7,"Constants":"Constants"}]},{},[11])


//# sourceMappingURL=script.min.js.map