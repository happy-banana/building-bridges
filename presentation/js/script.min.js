require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function(){

	var MobileServerBridgeBase = require('shared/MobileServerBridge');

	var Config = require('./config');
	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		MobileServerBridgeBase.call(this, presentation, url);
		bean.on(this.presentation, Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndexChanged.bind(this));
	}

	MobileServerBridge.prototype = Object.create(MobileServerBridgeBase.prototype);

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {
			email: Config.mobileServerUsername,
			password: Config.mobileServerPassword,
		};
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		MobileServerBridgeBase.prototype.socketConnectHandler.call(this);
		this.tryToSend(Constants.MESSAGE, {
			target: {
				client: 'mobile',
			},
			content: {
				action: Constants.SET_CURRENT_SLIDE_INDEX,
				currentSlideIndex: this.presentation.currentSlideIndex
			}
		});
	};

	MobileServerBridge.prototype.currentSlideIndexChanged = function(currentSlideIndex) {
		this.tryToSend(Constants.MESSAGE, {
			target: {
				client: 'mobile',
			},
			content: {
				action: Constants.SET_CURRENT_SLIDE_INDEX,
				currentSlideIndex: currentSlideIndex
			}
		});
	};

	return MobileServerBridge;

})();

},{"./config":4,"Constants":"Constants","shared/MobileServerBridge":"shared/MobileServerBridge"}],2:[function(require,module,exports){
module.exports = (function(){

	var path = requireNode('path');

	var PresentationBase = require('shared/Presentation');

	var Constants = require('Constants');
	var Config = require('./config');

	var ChildApp = require('./childapps/ChildApp');
	var MobileServerBridge = require('./MobileServerBridge');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	function Presentation(data, role, settings) {
		if(settings) {
			for(var key in settings) {
				Config[key] = settings[key];
			}
		}
		PresentationBase.call(this, data, 'presentation');

		this.elevatorMusicPlaying = false;
		this.elevatorMusic = false;

		$('#consoleModal').on('show.bs.modal', function (e) {
			var w = $('#consoleModal iframe')[0].contentWindow;
			w.postMessage('consoleModalOpen', 'http://localhost:3000');
		});

		this.elevatorMusic = $('#elevatormusic')[0];
		$('.elevator-button').on('click', $.proxy(this.toggleElevatorMusic, this));

		$('.info .ip').text('jsworkout.herokuapp.com');

		$(window).on('keydown', $.proxy(this.keydownHandler, this));

		$('body').on(Constants.GO_TO_PREVIOUS_SLIDE, $.proxy(this.goToPreviousSlide, this));
		$('body').on(Constants.GO_TO_NEXT_SLIDE, $.proxy(this.goToNextSlide, this));
		$('body').on(Constants.OPEN_COMMAND_LINE, $.proxy(this.openCommandLine, this));
		$('body').on(Constants.OPEN_CAMERA, $.proxy(this.openCamera, this));
	}

	Presentation.prototype = Object.create(PresentationBase.prototype);

	Presentation.prototype.createMobileServerBridge = function() {
		return new MobileServerBridge(this, Config.mobileServerUrl);
	};

	Presentation.prototype.toggleElevatorMusic = function() {
		this.elevatorMusicPlaying = !this.elevatorMusicPlaying;
		if(this.elevatorMusicPlaying) {
			this.elevatorMusic.play();
		} else {
			this.elevatorMusic.pause();
		}
	};

	//create webviews instead of iframes
	Presentation.prototype.createIFrames = function() {
		for(var i = 0; i < this.numIframes; i++) {
			var $iframe = $('<webview class="slide-frame" nodeintegration />');
			this.iframes.push($iframe);
			$('#presentation').append($iframe);
		}
	};

	//prepend urls with file:/// (faster?)
	Presentation.prototype.processIFrameSrc = function(src) {
		src = 'file:///' + path.resolve('./presentation/' + src);
		src = src.replace(/\\/g,"/");
		return src;
	};

	Presentation.prototype.createIFrameBridges = function(data) {
		PresentationBase.prototype.createIFrameBridges.call(this, data);
		var that = this;
		var $slideMenu = $('#slideMenu');
		var numIFrameBridges = this.iFrameBridges.length;
		for(var i = 0; i < numIFrameBridges; i++) {
			var iFrameBridge = this.iFrameBridges[i];
			$slideMenu.append('<li><a href="#" data-slidenr="' + i + '">' + (i + 1) + ' ' + iFrameBridge.name + '</a></li>');
		}
		$slideMenu.find('a').on('click', function(event){
			event.preventDefault();
			that.setCurrentSlideIndex(parseInt($(this).data('slidenr')));
		});
	};

	Presentation.prototype.iFrameMessageHandler = function(event) {
		PresentationBase.prototype.iFrameMessageHandler.call(this, event);
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case Constants.GO_TO_PREVIOUS_SLIDE:
				this.goToPreviousSlide();
				break;
			case Constants.GO_TO_NEXT_SLIDE:
				this.goToNextSlide();
				break;
			case Constants.OPEN_COMMAND_LINE:
				this.openCommandLine();
				break;
			case Constants.OPEN_CAMERA:
				this.openCamera();
				break;
			case Constants.CHILD_APP_SAVE_CODE:
				ChildApp.getInstance().saveCode(event.data.code, event.data.type);
				break;
			case Constants.CHILD_APP_RUN_CODE:
				ChildApp.getInstance().runCode(event.data.code, event.data.type);
				break;
		}
	};

	Presentation.prototype.keydownHandler = function(event) {
		switch(event.keyCode) {
			case KEYCODE_LEFT:
				this.goToPreviousSlide();
				break;
			case KEYCODE_RIGHT:
				this.goToNextSlide();
				break;
		}
	};

	Presentation.prototype.openCommandLine = function() {
		$('#consoleModal').modal('show');
	};

	Presentation.prototype.openCamera = function() {
		$('#webcamModal').modal('show');
	};

	return Presentation;

})();

},{"./MobileServerBridge":1,"./childapps/ChildApp":3,"./config":4,"Constants":"Constants","shared/Presentation":"shared/Presentation"}],3:[function(require,module,exports){
var Config = require('../config'),
	events = requireNode('events'),
	fs = requireNode('fs'),
	process = requireNode('child_process'),
	util = requireNode('util'),
	path = requireNode('path');

function ChildApp() {
	events.EventEmitter.call(this);
	console.log("[ChildApp] constructor");
}

util.inherits(ChildApp, events.EventEmitter);

ChildApp.getInstance = function() {
	if(!ChildApp.instance) {
		ChildApp.instance = new ChildApp();
	}
	return ChildApp.instance;
};

ChildApp.prototype.saveCode = function(code, type, cb) {
	//if code is running, stop it
	if(this.runner) {
		this.stop();
		console.log("[ChildApp] kill() executed");
		setTimeout(this.saveCode.bind(this, code, type, cb), 500);
	} else {
		var filePath = Config.childNodeAppFilePath;
		if(type === 'tessel') {
			filePath = Config.childTesselAppFilePath;
		}
		fs.writeFile(filePath, code, function(err) {
				if(err) {
						console.log(err);
				} else {
						console.log("[ChildApp] The file was saved!");
						if(cb) {
							cb();
						}
				}
		});
	}
};

ChildApp.prototype.runCode = function(code, type) {
	console.log("[ChildApp] runCode");
	//write code to file & run it
	this.saveCode(code, type, (function(){
		//run the code
		if(type === 'tessel') {
			this.runner = process.spawn("tessel", ["run", Config.childTesselAppFilePath], {cwd: path.dirname(Config.childTesselAppFilePath)});
		} else {
			this.runner = process.spawn("node", [Config.childNodeAppFilePath], {cwd: path.dirname(Config.childNodeAppFilePath)});
		}
		this.runner.stdout.on('data', this.onRunnerData.bind(this));
		this.runner.stderr.on('data', this.onRunnerData.bind(this));
		this.runner.on('disconnect', this.onDisconnect.bind(this));
		this.runner.on('close', this.onClose.bind(this));
	}).bind(this));
};

ChildApp.prototype.stop = function() {
	if(this.runner) {
		this.runner.stdout.removeAllListeners();
		this.runner.stderr.removeAllListeners();
		this.runner.stdin.end();
		this.runner.kill();
		this.runner = false;
	}
};

ChildApp.prototype.onRunnerData = function(data) {
	console.log(data.toString().trim());
};

ChildApp.prototype.onDisconnect = function() {
	console.log('[ChildApp] runner disconnected');
	this.runner = false;
};

ChildApp.prototype.onClose = function() {
	console.log('[ChildApp] runner closed');
	this.runner = false;
};

module.exports = ChildApp;

},{"../config":4}],4:[function(require,module,exports){
(function (global){
module.exports = (function(){

	var path = requireNode('path');

	if(!global.Config) {
		global.Config = {};

		// Retrieve local ip for Config
		var ip = '127.0.0.1', ifaces = requireNode('os').networkInterfaces();
		for (var dev in ifaces) {
			if(dev.indexOf('bridge') !== 0) {
				/* jshint ignore:start */
				ifaces[dev].forEach(function(details) {
					if (details.family === 'IPv4') {
						ip = details.address;
					}
				});
				/* jshint ignore:end */
			}
		}

		global.Config.childNodeAppFilePath = path.resolve('./child-app/node/app.js');
		global.Config.childTesselAppFilePath = path.resolve('./child-app/tessel/app.js');
		global.Config.ip = ip;

		global.Config.mobileServerUrl = "";
		global.Config.mobileServerUsername = "";
		global.Config.mobileServerPassword = "";

	}

	return global.Config;

})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(require,module,exports){
module.exports = (function(){

	var SharedContentBase = require('shared/ContentBase');
	var Constants = require('Constants');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	function ContentBase(name) {
		SharedContentBase.call(this, name);
		this.slideControlEnabled = true;
		$(window).on('keydown', this.keydownHandler.bind(this));			
	}

	ContentBase.prototype = Object.create(SharedContentBase.prototype);

	ContentBase.prototype.keydownHandler = function(event) {
		if(this.slideControlEnabled) {
			switch(event.keyCode) {
				case KEYCODE_LEFT:
					this.postMessage({action: Constants.GO_TO_PREVIOUS_SLIDE});
					break;
				case KEYCODE_RIGHT:
					this.postMessage({action: Constants.GO_TO_NEXT_SLIDE});
					break;
			}
		}
	};

	return ContentBase;

})();
},{"Constants":"Constants","shared/ContentBase":"shared/ContentBase"}],6:[function(require,module,exports){
(function(){

	var Presentation = require('./classes/Presentation');

  function init() {
  	if($('#presentation').length > 0) {
      initPresentation();
  	}
  }

  function initPresentation() {
    function getSettings(cb) {
      $.getJSON('../settings.json')
      .done(function(result){
        settings = result;
        cb();
      })
      .error(function(err){
        cb();
      });
    }

    function getData(cb) {
      $.getJSON('../data.json')
      .done(function(result){
        console.log("data result");
        data = result;
        cb();
      })
      .error(function(err){
        cb();
      });
    }

    var settings = {};
    var data = {};

    getSettings(getData.bind(this, function(){
      new Presentation(data, 'presentation', settings);
    }));

  }

	init();

})();

},{"./classes/Presentation":2}],"Constants":[function(require,module,exports){
module.exports = (function(){

	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_SLIDES : 'setSlides',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		MESSAGE : 'message',
		SOCKET_SEND : 'socketSend',
		SOCKET_RECEIVE : 'socketReceive',
		JOIN_SLIDE_ROOM : 'joinSlideRoom',
		LEAVE_SLIDE_ROOM : 'leaveSlideRoom',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		CHILD_APP_SAVE_CODE : 'childAppSaveCode',
		CHILD_APP_RUN_CODE : 'childAppRunCode',
		OPEN_COMMAND_LINE: 'openCommandLine',
		OPEN_CAMERA: 'openCamera'
	};

	return Constants;

})();

},{}],"shared/ContentBase":[function(require,module,exports){
module.exports = (function(){
	
	var Constants = require('Constants');

	function ContentBase(name) {
		this.name = name;
		this.fps = 60;
		this._animationFrameId = false;
		this._currentTime = 0;
		this._delta = 0;
		this._interval = false;
		this._lastTime = new Date().getTime();
		this.currentFrame = 0;

		window.addEventListener("message", this.receiveMessage.bind(this), false);

		this.__drawLoop = this._drawLoop.bind(this);
		this._interval = 1000 / this.fps;
	}

	ContentBase.prototype.receiveMessage = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case 'setState':
				this.setState(event.data.state);
				break;
			case Constants.SOCKET_RECEIVE:
				this.receiveSocketMessage(event.data.message);
				break;
			default:
				this.handleMessage(event.data);
				break;
		}
	};

	ContentBase.prototype.postMessage = function(data) {
		parent.postMessage(data, "*");
	};

	ContentBase.prototype.handleMessage = function(data) {
	};

	ContentBase.prototype.postSocketMessage = function(message) {
		this.postMessage({
			action: Constants.SOCKET_SEND,
			message: message
		});
	};

	ContentBase.prototype.receiveSocketMessage = function(message) {
		//console.log('ContentBase.prototype.receiveSocketMessage ' + this.name, message);
	};

	ContentBase.prototype.setState = function(state) {
		if(state !== this.state) {
			this.state = state;
			this.onStateChanged();
			if(this.state === Constants.STATE_ACTIVE) {
				this.currentFrame = 0;
				this._drawLoop();
			} else {
				window.cancelAnimationFrame(this._animationFrameId);
			}
		}
	};

	ContentBase.prototype.onStateChanged = function() {
	};

	ContentBase.prototype._drawLoop = function() {
		this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
		this._currentTime = (new Date()).getTime();
	    this._delta = (this._currentTime - this._lastTime);
	    if(this._delta > this._interval) {
	    	this.currentFrame++;
	    	this.drawLoop(this._delta);
	    	this._lastTime = this._currentTime - (this._delta % this._interval);
	    }
	};

	ContentBase.prototype.drawLoop = function(delta) {
	};

	return ContentBase;

})();
},{"Constants":"Constants"}],"shared/IFrameBridge":[function(require,module,exports){
module.exports = (function(){
	function getIframeWindow(iframe_object) {
		var doc;

		if (iframe_object.contentWindow) {
			return iframe_object.contentWindow;
		}

		if (iframe_object.window) {
			return iframe_object.window;
		}

		if (!doc && iframe_object.contentDocument) {
			doc = iframe_object.contentDocument;
		}

		if (!doc && iframe_object.document) {
			doc = iframe_object.document;
		}

		if (doc && doc.defaultView) {
		 return doc.defaultView;
		}

		if (doc && doc.parentWindow) {
			return doc.parentWindow;
		}

		return undefined;
	}

	function IFrameBridge(data) {
		this.data = data;
		this.name = this.data.name;
	}

	IFrameBridge.prototype.isAlreadyCorrectlyAttached = function(iframe, src) {
		return (this.iframe === iframe && $(iframe).attr('name') === this.name && $(iframe).attr('src') === src);
	};

	IFrameBridge.prototype.attachToIframe = function(iframe, src, cb) {
		this.iframe = iframe;
		$(iframe).off('load');
		$(iframe).attr('name', this.name);
		if(src !== $(iframe).attr('src')) {
			$(iframe).on('load dom-ready', (function(event){
				this.tryToPostMessage({
					action: 'setState',
					state: this.state
				});
				cb();
			}).bind(this));
			$(iframe).attr('src', src);
		}
	};

	IFrameBridge.prototype.setState = function(state) {
		this.state = state;
		this.tryToPostMessage({
			action: 'setState',
			state: this.state
		});
	};

	IFrameBridge.prototype.tryToPostMessage = function(message) {
		if(!this.iframe) {
			return;
		}
		var w = getIframeWindow(this.iframe);
		if(w) {
			w.postMessage(message, "*");
		}
	};

	return IFrameBridge;
})();

},{}],"shared/MobileServerBridge":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		this.presentation = presentation;
		this.url = url;
		this.connect();
	}

	MobileServerBridge.prototype.connect = function() {
		console.log('MobileServerBridge.connect');
		$.post(this.url + '/login', this.getLoginCredentials()).done(this.loginHandler.bind(this))
		.fail((function() {
			//retry after one second
			setTimeout((function(){
				this.connect();
			}).bind(this), 1000);
	  }).bind(this));
	};

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {};
	};

	MobileServerBridge.prototype.loginHandler = function(result) {
		this.token = result.token;
		this.socket = io(this.url, {
			query: 'token=' + this.token,
			reconnection: false,
			forceNew: true
		});
		this.socket.on('connect', this.socketConnectHandler.bind(this));
		this.socket.on('disconnect', this.socketDisconnectHandler.bind(this));
		this.socket.on('message', this.socketMessageHandler.bind(this));
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		console.log('MobileServerBridge.socketConnectHandler');
		this.presentation.mobileServerBridgeConnected();
	};

	MobileServerBridge.prototype.socketDisconnectHandler = function() {
		this.connect();
	};

	MobileServerBridge.prototype.tryToSend = function() {
		if(this.socket) {
			this.socket.emit.apply(this.socket, arguments);
		}
	};

	MobileServerBridge.prototype.socketMessageHandler = function(message) {
		this.presentation.mobileServerMessageHandler(message);
	};

	return MobileServerBridge;
})();
},{"Constants":"Constants"}],"shared/Presentation":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');
	var IFrameBridge = require('./IFrameBridge');

	/*
	 * data: json object with slides array property
	 * role: mobile or presentation
	 */
	function Presentation(data, role) {
		this.data = data;
		this.role = role;
		this.currentSlideIndex = -1;
		this.iframes = [];
		this.numIframes = 3;
		this.iFrameBridges = [];
		this.iFrameBridgesBySlideName = {};

		this.createIFrames();
		this.createIFrameBridges(this.data);

		this.mobileServerBridge = this.createMobileServerBridge();
		window.addEventListener("message", this.iFrameMessageHandler.bind(this), false);

		this.setCurrentSlideIndex(0);
	}

	Presentation.prototype.createIFrames = function() {
		for(var i = 0; i < this.numIframes; i++) {
			var $iframe = $('<iframe class="slide-frame" />');
			this.iframes.push($iframe);
			$('#presentation').append($iframe);
		}
	};

	Presentation.prototype.createIFrameBridges = function(data) {
		var that = this;
		var numSlides = data.slides.length;
		for(var i = 0; i < numSlides; i++) {
			var iFrameBridge = this.createIframeBridge(data.slides[i]);
			this.iFrameBridges.push(iFrameBridge);
			this.iFrameBridgesBySlideName[iFrameBridge.name] = iFrameBridge;
		}
	};

	Presentation.prototype.createIframeBridge = function(slide) {
		return new IFrameBridge(slide);
	};

	Presentation.prototype.iFrameMessageHandler = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case Constants.SOCKET_SEND:
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);
				}
				break;
		}
	};

	Presentation.prototype.mobileServerBridgeConnected = function() {
		//join the rooms of the iframes
		for(var i = 0; i < this.numIframes; i++) {
			this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.iframes[i]).attr('name'));
		}
	};

	Presentation.prototype.mobileServerMessageHandler = function(message) {
		if(message.target.slide) {
			//slide has to handle the message
			var iFrameBridge = this.getIFrameBridgeBySlideName(message.target.slide);
			if(iFrameBridge) {
				iFrameBridge.tryToPostMessage({
					action: Constants.SOCKET_RECEIVE,
					message: message
				});
			}
		} else {
			//presentation has to handle the message
			this.handleMobileServerMessage(message);
		}
	};

	Presentation.prototype.handleMobileServerMessage = function(message) {
		console.log('[shared/Presentation] handleMobileServerMessage', message);
	};

	Presentation.prototype.getIFrameBridgeByIndex = function(index) {
		if(index >= 0 && index < this.iFrameBridges.length) {
			return this.iFrameBridges[index];
		}
		return false;
	};

	Presentation.prototype.getIFrameBridgeBySlideName = function(slideName) {
		return this.iFrameBridgesBySlideName[slideName];
	};

	Presentation.prototype.getIFrameForSlide = function(slide, slidesNotToClear) {
		if(slide) {
			var $iframe = $('.slide-frame[name="' + slide.name + '"]');
			if($iframe.length > 0) {
				return $iframe[0];
			}
			//get a free iframe
			var slideNamesNotToClear = [];
			$(slidesNotToClear).each(function(index, obj){
				slideNamesNotToClear.push(obj.name);
			});
			var $iframes = $('.slide-frame');
			for (var i = $iframes.length - 1; i >= 0; i--) {
				$iframe = $($iframes[i]);
				var name = $iframe.attr('name');
				if(!name || slideNamesNotToClear.indexOf(name) === -1) {
					return $iframe[0];
				}
			}
		}
		return false;
	};

	Presentation.prototype.goToPreviousSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex - 1);
	};

	Presentation.prototype.goToNextSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex + 1);
	};

	Presentation.prototype.setCurrentSlideIndex = function(value) {
		value = Math.max(0, Math.min(value, this.iFrameBridges.length - 1));
		if(value !== this.currentSlideIndex) {
			this.currentSlideIndex = value;

			var currentIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex);
			var previousIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex - 1);
			var nextIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex + 1);

			var currentIframe = this.getIFrameForSlide(currentIFrameBridge, [previousIFrameBridge, nextIFrameBridge]);
			this.setupIFrame(currentIframe, currentIFrameBridge, Constants.STATE_ACTIVE, 0);

			var previousIframe = this.getIFrameForSlide(previousIFrameBridge, [currentIFrameBridge, nextIFrameBridge]);
			this.setupIFrame(previousIframe, previousIFrameBridge, Constants.STATE_INACTIVE, '-100%');

			var nextIframe = this.getIFrameForSlide(nextIFrameBridge, [previousIFrameBridge, currentIFrameBridge]);
			this.setupIFrame(nextIframe, nextIFrameBridge, Constants.STATE_INACTIVE, '100%');

			//all other iframe bridges should be unlinked from their iframe
			this.iFrameBridges.forEach(function(iFrameBridge){
				if(iFrameBridge === currentIFrameBridge) {
					return;
				}
				if(iFrameBridge === previousIFrameBridge) {
					return;
				}
				if(iFrameBridge === nextIFrameBridge) {
					return;
				}
				iFrameBridge.iframe = null;
			});

			bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);
		}
	};

	Presentation.prototype.setupIFrame = function(iFrame, iFrameBridge, state, left) {
		if(iFrame) {
			var src = "slides/" + iFrameBridge.name + '.html';
			if(iFrameBridge.data[this.role] && iFrameBridge.data[this.role].url) {
				src = iFrameBridge.data[this.role].url;
			}
			src = this.processIFrameSrc(src);
			if(iFrameBridge.isAlreadyCorrectlyAttached(iFrame, src)) {
				//console.log(iFrameBridge.name + ' already attached');
			} else {
				//leave previous channel of this iframe
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(iFrame).attr('name'));
				}
				//add the join as a callback for the onload event
				iFrameBridge.attachToIframe(iFrame, src, (function(){
					//join new channel
					if(this.mobileServerBridge) {
						this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(iFrame).attr('name'));
					}
				}).bind(this));
			}
			iFrameBridge.setState(state);
			$(iFrame).css('left', left);
		}
	};

	Presentation.prototype.processIFrameSrc = function(src) {
		return src;
	};

	Presentation.prototype.createMobileServerBridge = function() {
		//to implement in extending classes
	};

	return Presentation;

})();

},{"./IFrameBridge":"shared/IFrameBridge","Constants":"Constants"}],"slides/ChildAppEditor":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	function ChildAppEditor(name, type) {
		ContentBase.call(this, name);
		this.type = type;

		this.slideControlEnabled = false;
		console.log("[ChildAppEditor] init");

		this.codeMirror = CodeMirror.fromTextArea(document.getElementById('code'), {
			lineNumbers: true,
			mode: "javascript",
			extraKeys: {"Ctrl-Space": "autocomplete"}
	    });

	    $('.btn-save').on('click', $.proxy(this.saveClickHandler, this));
	    $('.btn-run').on('click', $.proxy(this.runClickHandler, this));
	}

	ChildAppEditor.prototype = Object.create(ContentBase.prototype);

	ChildAppEditor.prototype.saveClickHandler = function() {
		var code = this.codeMirror.getValue();
		this.postMessage({
			action: Constants.CHILD_APP_SAVE_CODE,
			code: code,
			type: this.type
		});
		this.postMessage({
			action: Constants.OPEN_COMMAND_LINE
		});
	};

	ChildAppEditor.prototype.runClickHandler = function() {
		var code = this.codeMirror.getValue();
		this.postMessage({
			action: Constants.CHILD_APP_RUN_CODE,
			code: code,
			type: this.type
		});
		this.postMessage({
			action: Constants.OPEN_CAMERA
		});
	};

	return ChildAppEditor;

})();
},{"../ContentBase":5,"Constants":"Constants"}],"slides/VideoSlide":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');

	function VideoSlide(name) {
		ContentBase.call(this, name);

		this.videoPlaying = false;

		this.video = $('video')[0];
		$(this.video).on('click', this.clickHandler.bind(this));
	}

	VideoSlide.prototype = Object.create(ContentBase.prototype);

	VideoSlide.prototype.clickHandler = function(event) {
		this.videoPlaying = !this.videoPlaying;
		if(this.videoPlaying) {
			this.video.play();
		} else {
			this.video.pause();
		}
	};

	return VideoSlide;

})();
},{"../ContentBase":5}]},{},[6])


//# sourceMappingURL=script.min.js.map