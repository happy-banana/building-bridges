require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	var PresentationBase = require('shared/Presentation');
	var MobileServerBridge = require('shared/MobileServerBridge');
	
	function MobilePresentation(data, role) {
		this.$overlay = $('#overlay');
		PresentationBase.call(this, data, role);
	}

	MobilePresentation.prototype = Object.create(PresentationBase.prototype);

	MobilePresentation.prototype.createMobileServerBridge = function() {
		return new MobileServerBridge(this, '');
	};

	MobilePresentation.prototype.handleMobileServerMessage = function(message) {
		if(!message.content) {
			return;
		}
		if(message.content.action == 'setCurrentSlideIndex') {
			this.setCurrentSlideIndex(message.content.currentSlideIndex);
		} else if(message.content.action == Constants.BLINK) {
			this.blink(message.content.text, message.content.backgroundColor);
		}
	};

	MobilePresentation.prototype.setCurrentSlideIndex = function(index) {
		PresentationBase.prototype.setCurrentSlideIndex.call(this, index);
		this.$overlay.removeClass('active');
		if(this.blinkInterval) {
			clearInterval(this.blinkInterval);
		}
	};

	MobilePresentation.prototype.blink = function(text, backgroundColor) {
		//overlay important, blinking text
		this.$overlay.find('.content').html(text);
		this.$overlay.addClass('active');
		if(this.blinkInterval) {
			clearInterval(this.blinkInterval);
		}
		this.blinkInterval = setInterval(this.blinkToggle.bind(this, backgroundColor), 500);
	};

	MobilePresentation.prototype.blinkToggle = function(backgroundColor) {
		this.$overlay.toggleClass('blink-on');
		if(this.$overlay.hasClass('blink-on')) {
			this.$overlay.css('background-color', backgroundColor);
		} else {
			this.$overlay.css('background-color', false);
		}
	};

	return MobilePresentation;

})();
},{"Constants":"Constants","shared/MobileServerBridge":"shared/MobileServerBridge","shared/Presentation":"shared/Presentation"}],2:[function(require,module,exports){
(function(){

	var MobilePresentation = require('./classes/MobilePresentation');

	function init(){
		if($('#presentation').length > 0) {
			//load the data.json
			$.get('/data.json').done(function(result){
				new MobilePresentation(result, 'mobile');
			});
		}
	}

	init();
})();
},{"./classes/MobilePresentation":1}],"Constants":[function(require,module,exports){
module.exports = (function(){

	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_SLIDES : 'setSlides',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		MESSAGE : 'message',
		SOCKET_SEND : 'socketSend',
		SOCKET_RECEIVE : 'socketReceive',
		JOIN_SLIDE_ROOM : 'joinSlideRoom',
		LEAVE_SLIDE_ROOM : 'leaveSlideRoom',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		CHILD_APP_SAVE_CODE : 'childAppSaveCode',
		CHILD_APP_RUN_CODE : 'childAppRunCode',
		CHILD_APP_STDOUT_DATA : 'childAppStdoutData',
		CHILD_APP_STDERR_DATA : 'childAppStderrData',

		OPEN_COMMAND_LINE: 'openCommandLine',
		OPEN_CAMERA: 'openCamera'
	};

	return Constants;

})();

},{}],"shared/ContentBase":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function ContentBase(name) {
		this.name = name;
		this.fps = 60;
		this._animationFrameId = false;
		this._currentTime = 0;
		this._delta = 0;
		this._interval = false;
		this._lastTime = new Date().getTime();
		this.currentFrame = 0;

		this.startListeningForMessages();

		this.__drawLoop = this._drawLoop.bind(this);
		this._interval = 1000 / this.fps;
	}

	ContentBase.prototype.startListeningForMessages = function() {
		this._receiveMessage = this.receiveMessage.bind(this);
		window.addEventListener("message", this._receiveMessage, false);
	};

	ContentBase.prototype.stopListeningForMessages = function() {
		window.removeEventListener('message', this._receiveMessage);
	};

	ContentBase.prototype.receiveMessage = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case 'setState':
				this.setState(event.data.state);
				break;
			case 'destroy':
				this.destroy();
				break;
			case Constants.SOCKET_RECEIVE:
				this.receiveSocketMessage(event.data.message);
				break;
			default:
				this.handleMessage(event.data);
				break;
		}
	};

	ContentBase.prototype.destroy = function() {
		console.log('destroy called', this.name);
		this.stopListeningForMessages();
		window.cancelAnimationFrame(this._animationFrameId);
	};

	ContentBase.prototype.postMessage = function(data) {
		parent.postMessage(data, "*");
	};

	ContentBase.prototype.handleMessage = function(data) {
	};

	ContentBase.prototype.postSocketMessage = function(message) {
		this.postMessage({
			action: Constants.SOCKET_SEND,
			message: message
		});
	};

	ContentBase.prototype.receiveSocketMessage = function(message) {
		//console.log('ContentBase.prototype.receiveSocketMessage ' + this.name, message);
	};

	ContentBase.prototype.setState = function(state) {
		if(state !== this.state) {
			this.state = state;
			this.onStateChanged();
			if(this.state === Constants.STATE_ACTIVE) {
				this.currentFrame = 0;
				this._drawLoop();
			} else {
				window.cancelAnimationFrame(this._animationFrameId);
			}
		}
	};

	ContentBase.prototype.onStateChanged = function() {
	};

	ContentBase.prototype._drawLoop = function() {
		this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
		this._currentTime = (new Date()).getTime();
	    this._delta = (this._currentTime - this._lastTime);
	    if(this._delta > this._interval) {
	    	this.currentFrame++;
	    	this.drawLoop(this._delta);
	    	this._lastTime = this._currentTime - (this._delta % this._interval);
	    }
	};

	ContentBase.prototype.drawLoop = function(delta) {
	};

	return ContentBase;

})();

},{"Constants":"Constants"}],"shared/MobileServerBridge":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		this.presentation = presentation;
		this.url = url;
		this.connect();
	}

	MobileServerBridge.prototype.connect = function() {
		console.log('MobileServerBridge.connect');
		$.post(this.url + '/login', this.getLoginCredentials()).done(this.loginHandler.bind(this))
		.fail((function() {
			//retry after one second
			setTimeout((function(){
				this.connect();
			}).bind(this), 1000);
	  }).bind(this));
	};

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {};
	};

	MobileServerBridge.prototype.loginHandler = function(result) {
		this.token = result.token;
		this.socket = io(this.url, {
			query: 'token=' + this.token,
			reconnection: false,
			forceNew: true
		});
		this.socket.on('connect', this.socketConnectHandler.bind(this));
		this.socket.on('disconnect', this.socketDisconnectHandler.bind(this));
		this.socket.on('message', this.socketMessageHandler.bind(this));
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		console.log('MobileServerBridge.socketConnectHandler');
		this.presentation.mobileServerBridgeConnected();
	};

	MobileServerBridge.prototype.socketDisconnectHandler = function() {
		this.connect();
	};

	MobileServerBridge.prototype.tryToSend = function() {
		if(this.socket) {
			this.socket.emit.apply(this.socket, arguments);
		}
	};

	MobileServerBridge.prototype.socketMessageHandler = function(message) {
		this.presentation.mobileServerMessageHandler(message);
	};

	return MobileServerBridge;
})();
},{"Constants":"Constants"}],"shared/Presentation":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');
	var SlideBridge = require('./SlideBridge');

	/*
	 * data: json object with slides array property
	 * role: mobile or presentation
	 */
	function Presentation(data, role) {
		this.data = data;
		this.role = role;
		this.currentSlideIndex = -1;
		this.slideHolders = [];
		this.numSlideHolders = 3;
		this.slideBridges = [];
		this.slideBridgesBySlideName = {};

		this.createSlideHolders();
		this.createSlideBridges(this.data);

		this.mobileServerBridge = this.createMobileServerBridge();
		this.startListeningForMessages();

		this.setCurrentSlideIndex(0);
	}

	Presentation.prototype.startListeningForMessages = function() {
		window.addEventListener("message", this.slideMessageHandler.bind(this), false);
	};

	Presentation.prototype.createSlideHolders = function() {
		for(var i = 0; i < this.numSlideHolders; i++) {
			var $slideHolder = $('<iframe class="slide-frame" />');
			this.slideHolders.push($slideHolder);
			$('#presentation').append($slideHolder);
		}
	};

	Presentation.prototype.createSlideBridges = function(data) {
		var that = this;
		var numSlides = data.slides.length;
		for(var i = 0; i < numSlides; i++) {
			var slideBridge = this.createSlideBridge(data.slides[i]);
			this.slideBridges.push(slideBridge);
			this.slideBridgesBySlideName[slideBridge.name] = slideBridge;
		}
	};

	Presentation.prototype.createSlideBridge = function(slide) {
		return new SlideBridge(slide);
	};

	Presentation.prototype.slideMessageHandler = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case Constants.SOCKET_SEND:
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);
				}
				break;
		}
	};

	Presentation.prototype.mobileServerBridgeConnected = function() {
		//join the rooms of the slideHolders
		for(var i = 0; i < this.numSlideHolders; i++) {
			this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.slideHolders[i]).attr('data-name'));
		}
	};

	Presentation.prototype.mobileServerMessageHandler = function(message) {
		if(message.target.slide) {
			//slide has to handle the message
			var slideBridge = this.getSlideBridgeByName(message.target.slide);
			if(slideBridge) {
				slideBridge.tryToPostMessage({
					action: Constants.SOCKET_RECEIVE,
					message: message
				});
			}
		} else {
			//presentation has to handle the message
			this.handleMobileServerMessage(message);
		}
	};

	Presentation.prototype.handleMobileServerMessage = function(message) {
		console.log('[shared/Presentation] handleMobileServerMessage', message);
	};

	Presentation.prototype.getSlideBridgeByIndex = function(index) {
		if(index >= 0 && index < this.slideBridges.length) {
			return this.slideBridges[index];
		}
		return false;
	};

	Presentation.prototype.getSlideBridgeByName = function(slideName) {
		return this.slideBridgesBySlideName[slideName];
	};

	Presentation.prototype.getSlideHolderForSlide = function(slide, slidesNotToClear) {
		if(slide) {
			var $slideHolder = $('.slide-frame[data-name="' + slide.name + '"]');
			if($slideHolder.length > 0) {
				return $slideHolder[0];
			}
			//get a free slideHolder
			var slideNamesNotToClear = [];
			$(slidesNotToClear).each(function(index, obj){
				slideNamesNotToClear.push(obj.name);
			});
			var $slideHolders = $('.slide-frame');
			for (var i = $slideHolders.length - 1; i >= 0; i--) {
				$slideHolder = $($slideHolders[i]);
				var name = $slideHolder.attr('data-name');
				if(!name || slideNamesNotToClear.indexOf(name) === -1) {
					return $slideHolder[0];
				}
			}
		}
		return false;
	};

	Presentation.prototype.goToPreviousSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex - 1);
	};

	Presentation.prototype.goToNextSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex + 1);
	};

	Presentation.prototype.setCurrentSlideIndex = function(value) {
		value = Math.max(0, Math.min(value, this.slideBridges.length - 1));
		if(value !== this.currentSlideIndex) {
			this.currentSlideIndex = value;

			var currentSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex);
			var previousSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex - 1);
			var nextSlideBridge = this.getSlideBridgeByIndex(this.currentSlideIndex + 1);

			var currentSlideHolder = this.getSlideHolderForSlide(currentSlideBridge, [previousSlideBridge, nextSlideBridge]);
			this.setupSlideHolder(currentSlideHolder, currentSlideBridge, Constants.STATE_ACTIVE, 0);

			var previousSlideHolder = this.getSlideHolderForSlide(previousSlideBridge, [currentSlideBridge, nextSlideBridge]);
			this.setupSlideHolder(previousSlideHolder, previousSlideBridge, Constants.STATE_INACTIVE, '-100%');

			var nextSlideHolder = this.getSlideHolderForSlide(nextSlideBridge, [previousSlideBridge, currentSlideBridge]);
			this.setupSlideHolder(nextSlideHolder, nextSlideBridge, Constants.STATE_INACTIVE, '100%');

			//all other slideHolder bridges should be unlinked from their slideHolder
			this.slideBridges.forEach(function(slideBridge){
				if(slideBridge === currentSlideBridge) {
					return;
				}
				if(slideBridge === previousSlideBridge) {
					return;
				}
				if(slideBridge === nextSlideBridge) {
					return;
				}
				slideBridge.slideHolder = null;
			});

			bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);
		}
	};

	Presentation.prototype.setupSlideHolder = function(slideHolder, slideBridge, state, left) {
		if(slideHolder) {
			var src = "slides/" + slideBridge.name + '.html';
			if(slideBridge.data[this.role] && slideBridge.data[this.role].url) {
				src = slideBridge.data[this.role].url;
			}
			src = this.processSlideSrc(src);
			if(slideBridge.isAlreadyCorrectlyAttached(slideHolder, src)) {
				//console.log(slideBridge.name + ' already attached');
			} else {
				this.attachToSlideHolder(slideHolder, slideBridge, src);
			}
			slideBridge.setState(state);
			$(slideHolder).css('left', left);
		}
	};

	Presentation.prototype.attachToSlideHolder = function(slideHolder, slideBridge, src) {
		//leave previous channel of this slideHolder
		if(this.mobileServerBridge) {
			this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(slideHolder).attr('data-name'));
		}
		//add the join as a callback for the onload event
		slideBridge.attachToSlideHolder(slideHolder, src, this.slideLoaded.bind(this, slideHolder, slideBridge, src));
	};

	Presentation.prototype.slideLoaded = function(slideHolder, slideBridge) {
		//join new channel
		if(this.mobileServerBridge) {
			this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(slideHolder).attr('data-name'));
		}
	};

	Presentation.prototype.processSlideSrc = function(src) {
		return src;
	};

	Presentation.prototype.createMobileServerBridge = function() {
		//to implement in extending classes
	};

	return Presentation;

})();

},{"./SlideBridge":"shared/SlideBridge","Constants":"Constants"}],"shared/SlideBridge":[function(require,module,exports){
module.exports = (function(){
	function getIframeWindow(iframe_object) {
		var doc;

		if (iframe_object.contentWindow) {
			return iframe_object.contentWindow;
		}

		if (iframe_object.window) {
			return iframe_object.window;
		}

		if (!doc && iframe_object.contentDocument) {
			doc = iframe_object.contentDocument;
		}

		if (!doc && iframe_object.document) {
			doc = iframe_object.document;
		}

		if (doc && doc.defaultView) {
		 return doc.defaultView;
		}

		if (doc && doc.parentWindow) {
			return doc.parentWindow;
		}

		return undefined;
	}

	function SlideBridge(data) {
		this.data = data;
		this.name = this.data.name;
	}

	SlideBridge.prototype.isAlreadyCorrectlyAttached = function(slideHolder, src) {
		return (this.slideHolder === slideHolder && $(slideHolder).attr('data-name') === this.name && $(slideHolder).attr('data-src') === src);
	};

	SlideBridge.prototype.attachToSlideHolder = function(slideHolder, src, cb) {
		//notify the content it is being cleared
		this.tryToPostMessage({action: 'destroy'});
		this.slideHolder = slideHolder;
		$(slideHolder).off('load');
		$(slideHolder).attr('data-name', this.name);
		$(slideHolder).addClass('loading');
		if(src !== $(slideHolder).attr('data-src')) {
			$(slideHolder).on('load', (function(event){
				$(slideHolder).removeClass('loading');
				this.tryToPostMessage({
					action: 'setState',
					state: this.state
				});
				cb();
			}).bind(this));
			$(slideHolder).attr('data-src', src);
			$(slideHolder).attr('src', src);
		}
	};

	SlideBridge.prototype.setState = function(state) {
		this.state = state;
		this.tryToPostMessage({
			action: 'setState',
			state: this.state
		});
	};

	SlideBridge.prototype.tryToPostMessage = function(message) {
		if(!this.slideHolder) {
			return;
		}
		var w = getIframeWindow(this.slideHolder);
		if(w) {
			w.postMessage(message, "*");
		}
	};

	return SlideBridge;
})();

},{}]},{},[2])


//# sourceMappingURL=script.min.js.map