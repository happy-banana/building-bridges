require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	var PresentationBase = require('shared/Presentation');
	var MobileServerBridge = require('shared/MobileServerBridge');
	
	function MobilePresentation(data, role) {
		this.$overlay = $('#overlay');
		PresentationBase.call(this, data, role);
	}

	MobilePresentation.prototype = Object.create(PresentationBase.prototype);

	MobilePresentation.prototype.createMobileServerBridge = function() {
		return new MobileServerBridge(this, '');
	};

	MobilePresentation.prototype.handleMobileServerMessage = function(message) {
		if(!message.content) {
			return;
		}
		if(message.content.action == 'setCurrentSlideIndex') {
			this.setCurrentSlideIndex(message.content.currentSlideIndex);
		} else if(message.content.action == Constants.BLINK) {
			this.blink(message.content.text, message.content.backgroundColor);
		}
	};

	MobilePresentation.prototype.setCurrentSlideIndex = function(index) {
		PresentationBase.prototype.setCurrentSlideIndex.call(this, index);
		this.$overlay.removeClass('active');
		if(this.blinkInterval) {
			clearInterval(this.blinkInterval);
		}
	};

	MobilePresentation.prototype.blink = function(text, backgroundColor) {
		//overlay important, blinking text
		this.$overlay.find('.content').html(text);
		this.$overlay.addClass('active');
		if(this.blinkInterval) {
			clearInterval(this.blinkInterval);
		}
		this.blinkInterval = setInterval(this.blinkToggle.bind(this, backgroundColor), 500);
	};

	MobilePresentation.prototype.blinkToggle = function(backgroundColor) {
		this.$overlay.toggleClass('blink-on');
		if(this.$overlay.hasClass('blink-on')) {
			this.$overlay.css('background-color', backgroundColor);
		} else {
			this.$overlay.css('background-color', false);
		}
	};

	return MobilePresentation;

})();
},{"Constants":"Constants","shared/MobileServerBridge":"shared/MobileServerBridge","shared/Presentation":"shared/Presentation"}],2:[function(require,module,exports){
(function(){

	var MobilePresentation = require('./classes/MobilePresentation');

	function init(){
		if($('#presentation').length > 0) {
			//load the data.json
			$.get('/data.json').done(function(result){
				new MobilePresentation(result, 'mobile');
			});
		}
	}

	init();
})();
},{"./classes/MobilePresentation":1}],"Constants":[function(require,module,exports){
module.exports = (function(){

	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_SLIDES : 'setSlides',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		MESSAGE : 'message',
		SOCKET_SEND : 'socketSend',
		SOCKET_RECEIVE : 'socketReceive',
		JOIN_SLIDE_ROOM : 'joinSlideRoom',
		LEAVE_SLIDE_ROOM : 'leaveSlideRoom',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		CHILD_APP_SAVE_CODE : 'childAppSaveCode',
		CHILD_APP_RUN_CODE : 'childAppRunCode',
		CHILD_APP_STDOUT_DATA : 'childAppStdoutData',
		CHILD_APP_STDERR_DATA : 'childAppStderrData',

		OPEN_COMMAND_LINE: 'openCommandLine',
		OPEN_CAMERA: 'openCamera'
	};

	return Constants;

})();

},{}],"shared/ContentBase":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function ContentBase(name) {
		this.name = name;
		this.fps = 60;
		this._animationFrameId = false;
		this._currentTime = 0;
		this._delta = 0;
		this._interval = false;
		this._lastTime = new Date().getTime();
		this.currentFrame = 0;

		this.startListeningForMessages();

		this.__drawLoop = this._drawLoop.bind(this);
		this._interval = 1000 / this.fps;
	}

	ContentBase.prototype.startListeningForMessages = function() {
		window.addEventListener("message", this.receiveMessage.bind(this), false);
	};

	ContentBase.prototype.receiveMessage = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case 'setState':
				this.setState(event.data.state);
				break;
			case Constants.SOCKET_RECEIVE:
				this.receiveSocketMessage(event.data.message);
				break;
			default:
				this.handleMessage(event.data);
				break;
		}
	};

	ContentBase.prototype.postMessage = function(data) {
		parent.postMessage(data, "*");
	};

	ContentBase.prototype.handleMessage = function(data) {
	};

	ContentBase.prototype.postSocketMessage = function(message) {
		this.postMessage({
			action: Constants.SOCKET_SEND,
			message: message
		});
	};

	ContentBase.prototype.receiveSocketMessage = function(message) {
		//console.log('ContentBase.prototype.receiveSocketMessage ' + this.name, message);
	};

	ContentBase.prototype.setState = function(state) {
		if(state !== this.state) {
			this.state = state;
			this.onStateChanged();
			if(this.state === Constants.STATE_ACTIVE) {
				this.currentFrame = 0;
				this._drawLoop();
			} else {
				window.cancelAnimationFrame(this._animationFrameId);
			}
		}
	};

	ContentBase.prototype.onStateChanged = function() {
	};

	ContentBase.prototype._drawLoop = function() {
		this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
		this._currentTime = (new Date()).getTime();
	    this._delta = (this._currentTime - this._lastTime);
	    if(this._delta > this._interval) {
	    	this.currentFrame++;
	    	this.drawLoop(this._delta);
	    	this._lastTime = this._currentTime - (this._delta % this._interval);
	    }
	};

	ContentBase.prototype.drawLoop = function(delta) {
	};

	return ContentBase;

})();

},{"Constants":"Constants"}],"shared/IFrameBridge":[function(require,module,exports){
module.exports = (function(){
	function getIframeWindow(iframe_object) {
		var doc;

		if (iframe_object.contentWindow) {
			return iframe_object.contentWindow;
		}

		if (iframe_object.window) {
			return iframe_object.window;
		}

		if (!doc && iframe_object.contentDocument) {
			doc = iframe_object.contentDocument;
		}

		if (!doc && iframe_object.document) {
			doc = iframe_object.document;
		}

		if (doc && doc.defaultView) {
		 return doc.defaultView;
		}

		if (doc && doc.parentWindow) {
			return doc.parentWindow;
		}

		return undefined;
	}

	function IFrameBridge(data) {
		this.data = data;
		this.name = this.data.name;
	}

	IFrameBridge.prototype.isAlreadyCorrectlyAttached = function(iframe, src) {
		return (this.iframe === iframe && $(iframe).attr('name') === this.name && $(iframe).attr('src') === src);
	};

	IFrameBridge.prototype.attachToIframe = function(iframe, src, cb) {
		this.iframe = iframe;
		$(iframe).off('load');
		$(iframe).off('dom-ready');
		$(iframe).attr('name', this.name);
		$(iframe).addClass('loading');
		if(src !== $(iframe).attr('src')) {
			$(iframe).on('load', (function(event){
				$(iframe).removeClass('loading');
				this.tryToPostMessage({
					action: 'setState',
					state: this.state
				});
				cb();
			}).bind(this));
			$(iframe).attr('src', src);
		}
	};

	IFrameBridge.prototype.setState = function(state) {
		this.state = state;
		this.tryToPostMessage({
			action: 'setState',
			state: this.state
		});
	};

	IFrameBridge.prototype.tryToPostMessage = function(message) {
		if(!this.iframe) {
			return;
		}
		var w = getIframeWindow(this.iframe);
		if(w) {
			w.postMessage(message, "*");
		}
	};

	return IFrameBridge;
})();

},{}],"shared/MobileServerBridge":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		this.presentation = presentation;
		this.url = url;
		this.connect();
	}

	MobileServerBridge.prototype.connect = function() {
		console.log('MobileServerBridge.connect');
		$.post(this.url + '/login', this.getLoginCredentials()).done(this.loginHandler.bind(this))
		.fail((function() {
			//retry after one second
			setTimeout((function(){
				this.connect();
			}).bind(this), 1000);
	  }).bind(this));
	};

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {};
	};

	MobileServerBridge.prototype.loginHandler = function(result) {
		this.token = result.token;
		this.socket = io(this.url, {
			query: 'token=' + this.token,
			reconnection: false,
			forceNew: true
		});
		this.socket.on('connect', this.socketConnectHandler.bind(this));
		this.socket.on('disconnect', this.socketDisconnectHandler.bind(this));
		this.socket.on('message', this.socketMessageHandler.bind(this));
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		console.log('MobileServerBridge.socketConnectHandler');
		this.presentation.mobileServerBridgeConnected();
	};

	MobileServerBridge.prototype.socketDisconnectHandler = function() {
		this.connect();
	};

	MobileServerBridge.prototype.tryToSend = function() {
		if(this.socket) {
			this.socket.emit.apply(this.socket, arguments);
		}
	};

	MobileServerBridge.prototype.socketMessageHandler = function(message) {
		this.presentation.mobileServerMessageHandler(message);
	};

	return MobileServerBridge;
})();
},{"Constants":"Constants"}],"shared/Presentation":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');
	var IFrameBridge = require('./IFrameBridge');

	/*
	 * data: json object with slides array property
	 * role: mobile or presentation
	 */
	function Presentation(data, role) {
		this.data = data;
		this.role = role;
		this.currentSlideIndex = -1;
		this.iframes = [];
		this.numIframes = 3;
		this.iFrameBridges = [];
		this.iFrameBridgesBySlideName = {};

		this.createIFrames();
		this.createIFrameBridges(this.data);

		this.mobileServerBridge = this.createMobileServerBridge();
		this.startListeningForMessages();

		this.setCurrentSlideIndex(0);
	}

	Presentation.prototype.startListeningForMessages = function() {
		window.addEventListener("message", this.iFrameMessageHandler.bind(this), false);
	};

	Presentation.prototype.createIFrames = function() {
		for(var i = 0; i < this.numIframes; i++) {
			var $iframe = $('<iframe class="slide-frame" />');
			this.iframes.push($iframe);
			$('#presentation').append($iframe);
		}
	};

	Presentation.prototype.createIFrameBridges = function(data) {
		var that = this;
		var numSlides = data.slides.length;
		for(var i = 0; i < numSlides; i++) {
			var iFrameBridge = this.createIframeBridge(data.slides[i]);
			this.iFrameBridges.push(iFrameBridge);
			this.iFrameBridgesBySlideName[iFrameBridge.name] = iFrameBridge;
		}
	};

	Presentation.prototype.createIframeBridge = function(slide) {
		return new IFrameBridge(slide);
	};

	Presentation.prototype.iFrameMessageHandler = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case Constants.SOCKET_SEND:
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);
				}
				break;
		}
	};

	Presentation.prototype.mobileServerBridgeConnected = function() {
		//join the rooms of the iframes
		for(var i = 0; i < this.numIframes; i++) {
			this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.iframes[i]).attr('name'));
		}
	};

	Presentation.prototype.mobileServerMessageHandler = function(message) {
		if(message.target.slide) {
			//slide has to handle the message
			var iFrameBridge = this.getIFrameBridgeBySlideName(message.target.slide);
			if(iFrameBridge) {
				iFrameBridge.tryToPostMessage({
					action: Constants.SOCKET_RECEIVE,
					message: message
				});
			}
		} else {
			//presentation has to handle the message
			this.handleMobileServerMessage(message);
		}
	};

	Presentation.prototype.handleMobileServerMessage = function(message) {
		console.log('[shared/Presentation] handleMobileServerMessage', message);
	};

	Presentation.prototype.getIFrameBridgeByIndex = function(index) {
		if(index >= 0 && index < this.iFrameBridges.length) {
			return this.iFrameBridges[index];
		}
		return false;
	};

	Presentation.prototype.getIFrameBridgeBySlideName = function(slideName) {
		return this.iFrameBridgesBySlideName[slideName];
	};

	Presentation.prototype.getIFrameForSlide = function(slide, slidesNotToClear) {
		if(slide) {
			var $iframe = $('.slide-frame[name="' + slide.name + '"]');
			if($iframe.length > 0) {
				return $iframe[0];
			}
			//get a free iframe
			var slideNamesNotToClear = [];
			$(slidesNotToClear).each(function(index, obj){
				slideNamesNotToClear.push(obj.name);
			});
			var $iframes = $('.slide-frame');
			for (var i = $iframes.length - 1; i >= 0; i--) {
				$iframe = $($iframes[i]);
				var name = $iframe.attr('name');
				if(!name || slideNamesNotToClear.indexOf(name) === -1) {
					return $iframe[0];
				}
			}
		}
		return false;
	};

	Presentation.prototype.goToPreviousSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex - 1);
	};

	Presentation.prototype.goToNextSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex + 1);
	};

	Presentation.prototype.setCurrentSlideIndex = function(value) {
		value = Math.max(0, Math.min(value, this.iFrameBridges.length - 1));
		if(value !== this.currentSlideIndex) {
			this.currentSlideIndex = value;

			var currentIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex);
			var previousIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex - 1);
			var nextIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex + 1);

			var currentIframe = this.getIFrameForSlide(currentIFrameBridge, [previousIFrameBridge, nextIFrameBridge]);
			this.setupIFrame(currentIframe, currentIFrameBridge, Constants.STATE_ACTIVE, 0);

			var previousIframe = this.getIFrameForSlide(previousIFrameBridge, [currentIFrameBridge, nextIFrameBridge]);
			this.setupIFrame(previousIframe, previousIFrameBridge, Constants.STATE_INACTIVE, '-100%');

			var nextIframe = this.getIFrameForSlide(nextIFrameBridge, [previousIFrameBridge, currentIFrameBridge]);
			this.setupIFrame(nextIframe, nextIFrameBridge, Constants.STATE_INACTIVE, '100%');

			//all other iframe bridges should be unlinked from their iframe
			this.iFrameBridges.forEach(function(iFrameBridge){
				if(iFrameBridge === currentIFrameBridge) {
					return;
				}
				if(iFrameBridge === previousIFrameBridge) {
					return;
				}
				if(iFrameBridge === nextIFrameBridge) {
					return;
				}
				iFrameBridge.iframe = null;
			});

			bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);
		}
	};

	Presentation.prototype.setupIFrame = function(iFrame, iFrameBridge, state, left) {
		if(iFrame) {
			var src = "slides/" + iFrameBridge.name + '.html';
			if(iFrameBridge.data[this.role] && iFrameBridge.data[this.role].url) {
				src = iFrameBridge.data[this.role].url;
			}
			src = this.processIFrameSrc(src);
			if(iFrameBridge.isAlreadyCorrectlyAttached(iFrame, src)) {
				//console.log(iFrameBridge.name + ' already attached');
			} else {
				//leave previous channel of this iframe
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(iFrame).attr('name'));
				}
				this.attachToIFrame(iFrame, iFrameBridge, src);
			}
			iFrameBridge.setState(state);
			$(iFrame).css('left', left);
		}
	};

	Presentation.prototype.attachToIFrame = function(iFrame, iFrameBridge, src) {
		//add the join as a callback for the onload event
		iFrameBridge.attachToIframe(iFrame, src, this.iFrameLoaded.bind(this, iFrame, iFrameBridge, src));
	};

	Presentation.prototype.iFrameLoaded = function(iFrame, iFrameBridge) {
		//join new channel
		if(this.mobileServerBridge) {
			this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(iFrame).attr('name'));
		}
	};

	Presentation.prototype.processIFrameSrc = function(src) {
		return src;
	};

	Presentation.prototype.createMobileServerBridge = function() {
		//to implement in extending classes
	};

	return Presentation;

})();

},{"./IFrameBridge":"shared/IFrameBridge","Constants":"Constants"}]},{},[2])


//# sourceMappingURL=script.min.js.map